/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"assets/commands.json.add_compile_definitions": "Add preprocessor definitions to the compilation of source files.",
	"assets/commands.json.add_compile_options": "Add options to the compilation of source files.",
	"assets/commands.json.add_custom_command": "Add a custom build rule to the generated build system.",
	"assets/commands.json.add_custom_target": "Add a target with no output so it will always be built.",
	"assets/commands.json.add_definitions": "Add -D define flags to the compilation of source files.",
	"assets/commands.json.add_dependencies": "Add a dependency between top-level targets.",
	"assets/commands.json.add_executable": "Add an executable to the project using the specified source files.",
	"assets/commands.json.add_library": "Add a library to the project using the specified source files.",
	"assets/commands.json.add_link_options": "Add options to the link step for executable, shared library or module library targets in the current directory and below that are added after this command is invoked.",
	"assets/commands.json.add_subdirectory": "Add a subdirectory to the build.",
	"assets/commands.json.add_test": "Add a test to the project to be run by ctest.",
	"assets/commands.json.aux_source_directory": "Find all source files in a directory.",
	"assets/commands.json.block": "Evaluate a group of commands with a dedicated variable and/or policy scope.",
	"assets/commands.json.break": "Break from an enclosing foreach or while loop.",
	"assets/commands.json.build_command": "Get a command line to build the current project. This is mainly intended for internal use by the CTest module.",
	"assets/commands.json.build_name": "Disallowed since version 3.0. See CMake Policy CMP0036.",
	"assets/commands.json.cmake_file_api": "Enables interacting with the CMake file API <cmake-file-api(7)>.",
	"assets/commands.json.cmake_host_system_information": "Query various host system information.",
	"assets/commands.json.cmake_language": "Call meta-operations on CMake commands.",
	"assets/commands.json.cmake_minimum_required": "Require a minimum version of cmake.",
	"assets/commands.json.cmake_parse_arguments": "Parse function or macro arguments.",
	"assets/commands.json.cmake_path": "This command is for the manipulation of paths. Only syntactic aspects of paths are handled, there is no interaction of any kind with any underlying file system. The path may represent a non-existing path or even one that is not allowed to exist on the current file system or platform. For operations that do interact with the filesystem, see the file command.",
	"assets/commands.json.cmake_policy": "Manage CMake Policy settings. See the cmake-policies manual for defined policies.",
	"assets/commands.json.configure_file": "Copy a file to another location and modify its contents.",
	"assets/commands.json.continue": "Continue to the top of enclosing foreach or while loop.",
	"assets/commands.json.create_test_sourcelist": "Create a test driver program that links together many small tests into a single executable. This is useful when building static executables with large libraries to shrink the total required size.",
	"assets/commands.json.ctest_build": "Perform the CTest Build Step as a Dashboard Client.",
	"assets/commands.json.ctest_configure": "Perform the CTest Configure Step as a Dashboard Client.",
	"assets/commands.json.ctest_coverage": "Perform the CTest Coverage Step as a Dashboard Client.",
	"assets/commands.json.ctest_empty_binary_directory": "empties the binary directory",
	"assets/commands.json.ctest_memcheck": "Perform the CTest MemCheck Step as a Dashboard Client.",
	"assets/commands.json.ctest_read_custom_files": "read CTestCustom files.",
	"assets/commands.json.ctest_run_script": "runs a ctest -S script",
	"assets/commands.json.ctest_sleep": "sleeps for some amount of time",
	"assets/commands.json.ctest_start": "Starts the testing for a given model",
	"assets/commands.json.ctest_submit": "Perform the CTest Submit Step as a Dashboard Client.",
	"assets/commands.json.ctest_test": "Perform the CTest Test Step as a Dashboard Client.",
	"assets/commands.json.ctest_update": "Perform the CTest Update Step as a Dashboard Client.",
	"assets/commands.json.ctest_upload": "Upload files to a dashboard server as a Dashboard Client.",
	"assets/commands.json.define_property": "Define and document custom properties.",
	"assets/commands.json.else": "Starts the else portion of an if block.",
	"assets/commands.json.elseif": "Starts an elseif portion of an if block.",
	"assets/commands.json.enable_language": "Enable languages (CXX/C/OBJC/OBJCXX/Fortran/etc)",
	"assets/commands.json.enable_testing": "Enable testing for current directory and below.",
	"assets/commands.json.endblock": "Ends a list of commands in a block and removes the scopes created by the block command.",
	"assets/commands.json.endforeach": "Ends a list of commands in a foreach block.",
	"assets/commands.json.endfunction": "Ends a list of commands in a function block.",
	"assets/commands.json.endif": "Ends a list of commands in an if block.",
	"assets/commands.json.endmacro": "Ends a list of commands in a macro block.",
	"assets/commands.json.endwhile": "Ends a list of commands in a while block.",
	"assets/commands.json.execute_process": "Execute one or more child processes.",
	"assets/commands.json.exec_program": "Run an executable program during the processing of the CMakeList.txt file.",
	"assets/commands.json.export": "Export targets or packages for outside projects to use them directly from the current project's build tree, without installation.",
	"assets/commands.json.export_library_dependencies": "Disallowed since version 3.0. See CMake Policy CMP0033.",
	"assets/commands.json.file": "File manipulation command.",
	"assets/commands.json.find_file": "This command is used to find a full path to named file.",
	"assets/commands.json.find_library": "This command is used to find a library.",
	"assets/commands.json.find_package": "Find a package (usually provided by something external to the project), and load its package-specific details. Calls to this command can also be intercepted by dependency providers .",
	"assets/commands.json.find_path": "This command is used to find a directory containing the named file.",
	"assets/commands.json.find_program": "This command is used to find a program.",
	"assets/commands.json.fltk_wrap_ui": "Create FLTK user interfaces Wrappers.",
	"assets/commands.json.foreach": "Evaluate a group of commands for each value in a list.",
	"assets/commands.json.function": "Start recording a function for later invocation as a command.",
	"assets/commands.json.get_cmake_property": "Get a global property of the CMake instance.",
	"assets/commands.json.get_directory_property": "Get a property of DIRECTORY scope.",
	"assets/commands.json.get_filename_component": "Get a specific component of a full filename.",
	"assets/commands.json.get_property": "Get a property.",
	"assets/commands.json.get_source_file_property": "Get a property for a source file.",
	"assets/commands.json.get_target_property": "Get a property from a target.",
	"assets/commands.json.get_test_property": "Get a property of the test.",
	"assets/commands.json.if": "Conditionally execute a group of commands.",
	"assets/commands.json.include": "Load and run CMake code from a file or module.",
	"assets/commands.json.include_directories": "Add include directories to the build.",
	"assets/commands.json.include_external_msproject": "Include an external Microsoft project file in a workspace.",
	"assets/commands.json.include_guard": "Provides an include guard for the file currently being processed by CMake.",
	"assets/commands.json.include_regular_expression": "Set the regular expression used for dependency checking.",
	"assets/commands.json.install": "Specify rules to run at install time.",
	"assets/commands.json.install_files": "This command has been superseded by the install command. It is provided for compatibility with older CMake code. The FILES form is directly replaced by the FILES form of the install command. The regexp form can be expressed more clearly using the GLOB form of the file command.",
	"assets/commands.json.install_programs": "This command has been superseded by the install command. It is provided for compatibility with older CMake code. The FILES form is directly replaced by the PROGRAMS form of the install command. The regexp form can be expressed more clearly using the GLOB form of the file command.",
	"assets/commands.json.install_targets": "This command has been superseded by the install command. It is provided for compatibility with older CMake code.",
	"assets/commands.json.link_directories": "Add directories in which the linker will look for libraries.",
	"assets/commands.json.link_libraries": "Link libraries to all targets added later.",
	"assets/commands.json.list": "Operations on semicolon-separated lists .",
	"assets/commands.json.load_cache": "Load in the values from another project's CMake cache.",
	"assets/commands.json.load_command": "Disallowed since version 3.0. See CMake Policy CMP0031.",
	"assets/commands.json.macro": "Start recording a macro for later invocation as a command",
	"assets/commands.json.make_directory": "Creates the specified directory. Full paths should be given. Any parent directories that do not exist will also be created. Use with care.",
	"assets/commands.json.mark_as_advanced": "Mark cmake cached variables as advanced.",
	"assets/commands.json.math": "Evaluate a mathematical expression.",
	"assets/commands.json.message": "Log a message.",
	"assets/commands.json.option": "Provide a boolean option that the user can optionally select.",
	"assets/commands.json.output_required_files": "Disallowed since version 3.0. See CMake Policy CMP0032.",
	"assets/commands.json.project": "Set the name of the project.",
	"assets/commands.json.qt_wrap_cpp": "Manually create Qt Wrappers.",
	"assets/commands.json.qt_wrap_ui": "Manually create Qt user interfaces Wrappers.",
	"assets/commands.json.remove": "Removes VALUE from the variable VAR. This is typically used to remove entries from a vector (e.g. semicolon separated list). VALUE is expanded.",
	"assets/commands.json.remove_definitions": "Remove -D define flags added by add_definitions.",
	"assets/commands.json.return": "Return from a file, directory or function.",
	"assets/commands.json.separate_arguments": "Parse command-line arguments into a semicolon-separated list.",
	"assets/commands.json.set": "Set a normal, cache, or environment variable to a given value. See the cmake-language(7) variables  documentation for the scopes and interaction of normal variables and cache entries.",
	"assets/commands.json.set_directory_properties": "Set properties of the current directory and subdirectories.",
	"assets/commands.json.set_property": "Set a named property in a given scope.",
	"assets/commands.json.set_source_files_properties": "Source files can have properties that affect how they are built.",
	"assets/commands.json.set_target_properties": "Targets can have properties that affect how they are built.",
	"assets/commands.json.set_tests_properties": "Set a property of the tests.",
	"assets/commands.json.site_name": "Set the given variable to the name of the computer.",
	"assets/commands.json.source_group": "Define a grouping for source files in IDE project generation. There are two different signatures to create source groups.",
	"assets/commands.json.string": "String operations.",
	"assets/commands.json.subdirs": "Add a list of subdirectories to the build.",
	"assets/commands.json.subdir_depends": "Disallowed since version 3.0. See CMake Policy CMP0029.",
	"assets/commands.json.target_compile_definitions": "Add compile definitions to a target.",
	"assets/commands.json.target_compile_features": "Add expected compiler features to a target.",
	"assets/commands.json.target_compile_options": "Add compile options to a target.",
	"assets/commands.json.target_include_directories": "Add include directories to a target.",
	"assets/commands.json.target_link_directories": "Add link directories to a target.",
	"assets/commands.json.target_link_libraries": "Specify libraries or flags to use when linking a given target and/or its dependents. Usage requirements  from linked library targets will be propagated. Usage requirements of a target's dependencies affect compilation of its own sources.",
	"assets/commands.json.target_link_options": "Add options to the link step for an executable, shared library or module library target.",
	"assets/commands.json.target_precompile_headers": "Add a list of header files to precompile.",
	"assets/commands.json.target_sources": "Add sources to a target.",
	"assets/commands.json.try_compile": "Try building some code.",
	"assets/commands.json.try_run": "Try compiling and then running some code.",
	"assets/commands.json.unset": "Unset a variable, cache variable, or environment variable.",
	"assets/commands.json.use_mangled_mesa": "Disallowed since version 3.0. See CMake Policy CMP0030.",
	"assets/commands.json.utility_source": "Disallowed since version 3.0. See CMake Policy CMP0034.",
	"assets/commands.json.variable_requires": "Disallowed since version 3.0. See CMake Policy CMP0035.",
	"assets/commands.json.variable_watch": "Watch the CMake variable for change.",
	"assets/commands.json.while": "Evaluate a group of commands while a condition is true",
	"assets/commands.json.write_file": "The first argument is the file name, the rest of the arguments are messages to write. If the argument APPEND is specified, then the message will be appended."
}