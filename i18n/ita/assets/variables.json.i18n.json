/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"assets/variables.json.ANDROID": "Set to 1 when the target system (CMAKE_SYSTEM_NAME) is Android.",
	"assets/variables.json.APPLE": "Set to True when the target system is an Apple platform (macOS, iOS, tvOS, visionOS or watchOS).",
	"assets/variables.json.BORLAND": "True if the Borland compiler is being used.",
	"assets/variables.json.BSD": "Set to a string value when the target system is BSD. This value can be one of the following: DragonFlyBSD, FreeBSD, OpenBSD, or NetBSD.",
	"assets/variables.json.BUILD_SHARED_LIBS": "Tell add_library to default to SHARED libraries, instead of STATIC libraries, when called with no explicit library type.",
	"assets/variables.json.CACHE": "Operator to read cache variables.",
	"assets/variables.json.CMAKE_ABSOLUTE_DESTINATION_FILES": "List of files which have been installed using an ABSOLUTE DESTINATION path.",
	"assets/variables.json.CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY": "Whether to enable the DEPENDS_EXPLICIT_ONLY option by default in add_custom_command.",
	"assets/variables.json.CMAKE_ADSP_ROOT": "When :ref:`Cross Compiling for ADSP SHARC/Blackfin`, this variable holds the absolute path to the latest CCES or VDSP++ install. The directory is expected to contain the cc21k.exe and ccblkfn.exe compilers. This will be set automatically if a default install of CCES or VDSP++ can be found.",
	"assets/variables.json.CMAKE_AIX_EXPORT_ALL_SYMBOLS": "Default value for AIX_EXPORT_ALL_SYMBOLS target property. This variable is used to initialize the property on each target as it is created.",
	"assets/variables.json.CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS": "Default value for the ANDROID_ANT_ADDITIONAL_OPTIONS target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_API": "When Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition, this variable may be set to specify the default value for the ANDROID_API target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_API_MIN": "Default value for the ANDROID_API_MIN target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_ARCH": "When Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition, this variable may be set to specify the default value for the ANDROID_ARCH target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_ARCH_ABI": "When Cross Compiling for Android, this variable specifies the target architecture and ABI to be used. Valid values are:",
	"assets/variables.json.CMAKE_ANDROID_ARM_MODE": "When Cross Compiling for Android and CMAKE_ANDROID_ARCH_ABI is set to one of the armeabi architectures, set CMAKE_ANDROID_ARM_MODE to ON to target 32-bit ARM processors (-marm). Otherwise, the default is to target the 16-bit Thumb processors (-mthumb).",
	"assets/variables.json.CMAKE_ANDROID_ARM_NEON": "When Cross Compiling for Android and CMAKE_ANDROID_ARCH_ABI is set to armeabi-v7a set CMAKE_ANDROID_ARM_NEON to ON to target ARM NEON devices.",
	"assets/variables.json.CMAKE_ANDROID_ASSETS_DIRECTORIES": "Default value for the ANDROID_ASSETS_DIRECTORIES target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_EXCEPTIONS": "When Cross Compiling for Android with the NDK, this variable may be set to specify whether exceptions are enabled.",
	"assets/variables.json.CMAKE_ANDROID_GUI": "Default value for the ANDROID_GUI target property of executables. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_JAR_DEPENDENCIES": "Default value for the ANDROID_JAR_DEPENDENCIES target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_JAR_DIRECTORIES": "Default value for the ANDROID_JAR_DIRECTORIES target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_JAVA_SOURCE_DIR": "Default value for the ANDROID_JAVA_SOURCE_DIR target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES": "Default value for the ANDROID_NATIVE_LIB_DEPENDENCIES target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES": "Default value for the ANDROID_NATIVE_LIB_DIRECTORIES target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_NDK": "When Cross Compiling for Android with the NDK, this variable holds the absolute path to the root directory of the NDK. The directory must contain a platforms subdirectory holding the android-<api> directories.",
	"assets/variables.json.CMAKE_ANDROID_NDK_DEPRECATED_HEADERS": "When Cross Compiling for Android with the NDK, this variable may be set to specify whether to use the deprecated per-api-level headers instead of the unified headers.",
	"assets/variables.json.CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG": "When Cross Compiling for Android with the NDK, this variable provides the NDK's \"host tag\" used to construct the path to prebuilt toolchains that run on the host.",
	"assets/variables.json.CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION": "When Cross Compiling for Android with the NDK, this variable may be set to specify the version of the toolchain to be used as the compiler.",
	"assets/variables.json.CMAKE_ANDROID_NDK_VERSION": "When Cross Compiling for Android with the NDK and using an Android NDK version 11 or higher, this variable is provided by CMake to report the NDK version number.",
	"assets/variables.json.CMAKE_ANDROID_PROCESS_MAX": "Default value for the ANDROID_PROCESS_MAX target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_PROGUARD": "Default value for the ANDROID_PROGUARD target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_PROGUARD_CONFIG_PATH": "Default value for the ANDROID_PROGUARD_CONFIG_PATH target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_RTTI": "When Cross Compiling for Android with the NDK, this variable may be set to specify whether RTTI is enabled.",
	"assets/variables.json.CMAKE_ANDROID_SECURE_PROPS_PATH": "Default value for the ANDROID_SECURE_PROPS_PATH target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_SKIP_ANT_STEP": "Default value for the ANDROID_SKIP_ANT_STEP target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_ANDROID_STANDALONE_TOOLCHAIN": "When Cross Compiling for Android with a Standalone Toolchain, this variable holds the absolute path to the root directory of the toolchain. The specified directory must contain a sysroot subdirectory.",
	"assets/variables.json.CMAKE_ANDROID_STL_TYPE": "When Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition, this variable may be set to specify the default value for the ANDROID_STL_TYPE target property. See that target property for additional information.",
	"assets/variables.json.CMAKE_APPBUNDLE_PATH": "Semicolon-separated list  of directories specifying a search path for macOS application bundles used by the find_program, and find_package commands.",
	"assets/variables.json.CMAKE_APPLE_SILICON_PROCESSOR": "On Apple Silicon hosts running macOS, set this variable to tell CMake what architecture to use for CMAKE_HOST_SYSTEM_PROCESSOR. The value must be either arm64 or x86_64.",
	"assets/variables.json.CMAKE_AR": "Name of archiving tool for static libraries.",
	"assets/variables.json.CMAKE_ARCHIVE_OUTPUT_DIRECTORY": "Where to put all the ARCHIVE  target files when built.",
	"assets/variables.json.CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG": "Where to put all the ARCHIVE  target files when built for a specific configuration.",
	"assets/variables.json.CMAKE_ARGC": "Number of command line arguments passed to CMake in script mode.",
	"assets/variables.json.CMAKE_ARGV0": "Command line argument passed to CMake in script mode.",
	"assets/variables.json.CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": "This variable is used to initialize the AUTOGEN_BETTER_GRAPH_MULTI_CONFIG property on all targets as they are created. See that target property for additional information.",
	"assets/variables.json.CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX": "Command line length limit for autogen targets, i.e. moc or uic, that triggers the use of response files on Windows instead of passing all arguments to the command line.",
	"assets/variables.json.CMAKE_AUTOGEN_ORIGIN_DEPENDS": "Switch for forwarding origin target dependencies to the corresponding <ORIGIN>_autogen targets.",
	"assets/variables.json.CMAKE_AUTOGEN_PARALLEL": "Number of parallel moc or uic processes to start when using AUTOMOC and AUTOUIC.",
	"assets/variables.json.CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE": "This variable is used to initialize the AUTOGEN_USE_SYSTEM_INCLUDE property on all targets as they are created. See that target property for additional information.",
	"assets/variables.json.CMAKE_AUTOGEN_VERBOSE": "Sets the verbosity of AUTOMOC, AUTOUIC and AUTORCC. A positive integer value or a true boolean value lets the AUTO* generators output additional processing information.",
	"assets/variables.json.CMAKE_AUTOMOC": "Whether to handle moc automatically for Qt targets.",
	"assets/variables.json.CMAKE_AUTOMOC_COMPILER_PREDEFINES": "This variable is used to initialize the AUTOMOC_COMPILER_PREDEFINES property on all the targets. See that target property for additional information.",
	"assets/variables.json.CMAKE_AUTOMOC_DEPEND_FILTERS": "Filter definitions used by CMAKE_AUTOMOC to extract file names from source code as additional dependencies for the moc file.",
	"assets/variables.json.CMAKE_AUTOMOC_EXECUTABLE": "This variable is used to initialize the AUTOMOC_EXECUTABLE property on all the targets. See that target property for additional information.",
	"assets/variables.json.CMAKE_AUTOMOC_MACRO_NAMES": "Semicolon-separated list  list of macro names used by CMAKE_AUTOMOC to determine if a C++ file needs to be processed by moc.",
	"assets/variables.json.CMAKE_AUTOMOC_MOC_OPTIONS": "Additional options for moc when using CMAKE_AUTOMOC.",
	"assets/variables.json.CMAKE_AUTOMOC_PATH_PREFIX": "Whether to generate the -p path prefix option for moc on AUTOMOC enabled Qt targets.",
	"assets/variables.json.CMAKE_AUTOMOC_RELAXED_MODE": "Switch between strict and relaxed automoc mode.",
	"assets/variables.json.CMAKE_AUTORCC": "Whether to handle rcc automatically for Qt targets.",
	"assets/variables.json.CMAKE_AUTORCC_EXECUTABLE": "This variable is used to initialize the AUTORCC_EXECUTABLE property on all the targets. See that target property for additional information.",
	"assets/variables.json.CMAKE_AUTORCC_OPTIONS": "Additional options for rcc when using CMAKE_AUTORCC.",
	"assets/variables.json.CMAKE_AUTOUIC": "Whether to handle uic automatically for Qt targets.",
	"assets/variables.json.CMAKE_AUTOUIC_EXECUTABLE": "This variable is used to initialize the AUTOUIC_EXECUTABLE property on all the targets. See that target property for additional information.",
	"assets/variables.json.CMAKE_AUTOUIC_OPTIONS": "Additional options for uic when using CMAKE_AUTOUIC.",
	"assets/variables.json.CMAKE_AUTOUIC_SEARCH_PATHS": "Search path list used by CMAKE_AUTOUIC to find included .ui files.",
	"assets/variables.json.CMAKE_BACKWARDS_COMPATIBILITY": "Deprecated. See CMake Policy CMP0001 documentation.",
	"assets/variables.json.CMAKE_BINARY_DIR": "The path to the top level of the build tree.",
	"assets/variables.json.CMAKE_BUILD_RPATH": "Semicolon-separated list  specifying runtime path (RPATH) entries to add to binaries linked in the build tree (for platforms that support it). The entries will not be used for binaries in the install tree. See also the CMAKE_INSTALL_RPATH variable.",
	"assets/variables.json.CMAKE_BUILD_RPATH_USE_ORIGIN": "Whether to use relative paths for the build RPATH.",
	"assets/variables.json.CMAKE_BUILD_TOOL": "This variable exists only for backwards compatibility. It contains the same value as CMAKE_MAKE_PROGRAM. Use that variable instead.",
	"assets/variables.json.CMAKE_BUILD_TYPE": "Specifies the build type on single-configuration generators (e.g. Makefile Generators or Ninja). Typical values include Debug, Release, RelWithDebInfo and MinSizeRel, but custom build types can also be defined.",
	"assets/variables.json.CMAKE_BUILD_WITH_INSTALL_NAME_DIR": "Whether to use INSTALL_NAME_DIR on targets in the build tree.",
	"assets/variables.json.CMAKE_BUILD_WITH_INSTALL_RPATH": "Use the install path for the RPATH.",
	"assets/variables.json.CMAKE_CACHEFILE_DIR": "This variable is used internally by CMake, and may not be set during the first configuration of a build tree. When it is set, it has the same value as CMAKE_BINARY_DIR. Use that variable instead.",
	"assets/variables.json.CMAKE_CACHE_MAJOR_VERSION": "Major version of CMake used to create the CMakeCache.txt file",
	"assets/variables.json.CMAKE_CACHE_MINOR_VERSION": "Minor version of CMake used to create the CMakeCache.txt file",
	"assets/variables.json.CMAKE_CACHE_PATCH_VERSION": "Patch version of CMake used to create the CMakeCache.txt file",
	"assets/variables.json.CMAKE_CFG_INTDIR": "Build-time reference to per-configuration output subdirectory.",
	"assets/variables.json.CMAKE_CLANG_VFS_OVERLAY": "When cross compiling for windows with clang-cl, this variable can be an absolute path pointing to a clang virtual file system yaml file, which will enable clang-cl to resolve windows header names on a case sensitive file system.",
	"assets/variables.json.CMAKE_CL_64": "Discouraged. Use CMAKE_SIZEOF_VOID_P instead.",
	"assets/variables.json.CMAKE_CODEBLOCKS_COMPILER_ID": "Change the compiler id in the generated CodeBlocks project files.",
	"assets/variables.json.CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES": "Change the way the CodeBlocks generator creates project files.",
	"assets/variables.json.CMAKE_CODELITE_USE_TARGETS": "Change the way the CodeLite generator creates projectfiles.",
	"assets/variables.json.CMAKE_COLOR_DIAGNOSTICS": "Enable color diagnostics throughout.",
	"assets/variables.json.CMAKE_COLOR_MAKEFILE": "Enables color output when using the Makefile Generators.",
	"assets/variables.json.CMAKE_COMMAND": "The full path to the cmake executable.",
	"assets/variables.json.CMAKE_COMPILER_2005": "Using the Visual Studio 2005 compiler from Microsoft",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUCC": "True if the C compiler is GNU.",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUCXX": "True if the C++ (CXX) compiler is GNU.",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUG77": "True if the Fortran compiler is GNU.",
	"assets/variables.json.CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY": "Output directory for MS debug symbol .pdb files generated by the compiler while building source files.",
	"assets/variables.json.CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG": "Per-configuration output directory for MS debug symbol .pdb files generated by the compiler while building source files.",
	"assets/variables.json.CMAKE_COMPILE_WARNING_AS_ERROR": "Specify whether to treat warnings on compile as errors.",
	"assets/variables.json.CMAKE_CONFIGURATION_TYPES": "Specifies the available build types (configurations) on multi-config generators (e.g. Visual Studio , Xcode, or Ninja Multi-Config) as a semicolon-separated list . Typical entries include Debug, Release, RelWithDebInfo and MinSizeRel, but custom build types can also be defined.",
	"assets/variables.json.CMAKE_CONFIG_POSTFIX": "Default filename postfix for libraries under configuration <CONFIG>.",
	"assets/variables.json.CMAKE_CPACK_COMMAND": "Full path to cpack command installed with CMake.",
	"assets/variables.json.CMAKE_CROSSCOMPILING": "This variable is set by CMake to indicate whether it is cross compiling, but note limitations discussed below.",
	"assets/variables.json.CMAKE_CROSSCOMPILING_EMULATOR": "This variable is only used when CMAKE_CROSSCOMPILING is on. It should point to a command on the host system that can run executable built for the target system.",
	"assets/variables.json.CMAKE_CROSS_CONFIGS": "Specifies a semicolon-separated list  of configurations available from all build-<Config>.ninja files in the Ninja Multi-Config generator. This variable activates cross-config mode. Targets from each config specified in this variable can be built from any build-<Config>.ninja file. Custom commands will use the configuration native to build-<Config>.ninja. If it is set to all, all configurations from CMAKE_CONFIGURATION_TYPES are cross-configs. If it is not specified, or empty, each build-<Config>.ninja file will only contain build rules for its own configuration.",
	"assets/variables.json.CMAKE_CTEST_ARGUMENTS": "Set this to a semicolon-separated list  of command-line arguments to pass to ctest when running tests through the test (or RUN_TESTS) target of the generated build system.",
	"assets/variables.json.CMAKE_CTEST_COMMAND": "Full path to ctest command installed with CMake.",
	"assets/variables.json.CMAKE_CUDA_ARCHITECTURES": "Default value for CUDA_ARCHITECTURES property of targets.",
	"assets/variables.json.CMAKE_CUDA_COMPILE_FEATURES": "List of features known to the CUDA compiler",
	"assets/variables.json.CMAKE_CUDA_EXTENSIONS": "Default value for CUDA_EXTENSIONS target property if set when a target is created.",
	"assets/variables.json.CMAKE_CUDA_HOST_COMPILER": "This is the original CUDA-specific name for the more general CMAKE_<LANG>_HOST_COMPILER variable. See the latter for details.",
	"assets/variables.json.CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS": "Default value for CUDA_RESOLVE_DEVICE_SYMBOLS target property when defined. By default this variable is not defined.",
	"assets/variables.json.CMAKE_CUDA_RUNTIME_LIBRARY": "Select the CUDA runtime library for use when compiling and linking CUDA. This variable is used to initialize the CUDA_RUNTIME_LIBRARY property on all targets as they are created.",
	"assets/variables.json.CMAKE_CUDA_SEPARABLE_COMPILATION": "Default value for CUDA_SEPARABLE_COMPILATION target property. This variable is used to initialize the property on each target as it is created.",
	"assets/variables.json.CMAKE_CUDA_STANDARD": "Default value for CUDA_STANDARD target property if set when a target is created.",
	"assets/variables.json.CMAKE_CUDA_STANDARD_REQUIRED": "Default value for CUDA_STANDARD_REQUIRED target property if set when a target is created.",
	"assets/variables.json.CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES": "When the CUDA language has been enabled, this provides a semicolon-separated list  of include directories provided by the CUDA Toolkit. The value may be useful for C++ source files to include CUDA headers.",
	"assets/variables.json.CMAKE_CURRENT_BINARY_DIR": "The path to the binary directory currently being processed.",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION": "When executing code inside a function, this variable contains the name of the current function. It can be useful for diagnostic or debug messages.",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_DIR": "When executing code inside a function, this variable contains the full directory of the listfile that defined the current function.",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_FILE": "When executing code inside a function, this variable contains the full path to the listfile that defined the current function.",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_LINE": "When executing code inside a function, this variable contains the line number in the listfile where the current function was defined.",
	"assets/variables.json.CMAKE_CURRENT_LIST_DIR": "Full directory of the listfile currently being processed.",
	"assets/variables.json.CMAKE_CURRENT_LIST_FILE": "Full path to the listfile currently being processed.",
	"assets/variables.json.CMAKE_CURRENT_LIST_LINE": "The line number of the current file being processed.",
	"assets/variables.json.CMAKE_CURRENT_SOURCE_DIR": "The path to the source directory currently being processed.",
	"assets/variables.json.CMAKE_CXX_COMPILER_IMPORT_STD": "A list of C++ standard levels for which import std support exists for the current C++ toolchain. Support for C++<NN> may be detected using a <NN> IN_LIST CMAKE_CXX_COMPILER_IMPORT_STD predicate with the if command.",
	"assets/variables.json.CMAKE_CXX_COMPILE_FEATURES": "List of features known to the C++ compiler",
	"assets/variables.json.CMAKE_CXX_EXTENSIONS": "Default value for CXX_EXTENSIONS target property if set when a target is created.",
	"assets/variables.json.CMAKE_CXX_MODULE_STD": "Whether to add utility targets as dependencies to targets with at least cxx_std_23 or not.",
	"assets/variables.json.CMAKE_CXX_SCAN_FOR_MODULES": "Whether to scan C++ source files for module dependencies.",
	"assets/variables.json.CMAKE_CXX_STANDARD": "Default value for CXX_STANDARD target property if set when a target is created.",
	"assets/variables.json.CMAKE_CXX_STANDARD_REQUIRED": "Default value for CXX_STANDARD_REQUIRED target property if set when a target is created.",
	"assets/variables.json.CMAKE_C_COMPILE_FEATURES": "List of features known to the C compiler",
	"assets/variables.json.CMAKE_C_EXTENSIONS": "Default value for C_EXTENSIONS target property if set when a target is created.",
	"assets/variables.json.CMAKE_C_STANDARD": "Default value for C_STANDARD target property if set when a target is created.",
	"assets/variables.json.CMAKE_C_STANDARD_REQUIRED": "Default value for C_STANDARD_REQUIRED target property if set when a target is created.",
	"assets/variables.json.CMAKE_DEBUG_POSTFIX": "See variable CMAKE_<CONFIG>_POSTFIX.",
	"assets/variables.json.CMAKE_DEBUG_TARGET_PROPERTIES": "Enables tracing output for target properties.",
	"assets/variables.json.CMAKE_DEFAULT_BUILD_TYPE": "Specifies the configuration to use by default in a build.ninja file in the Ninja Multi-Config generator. If this variable is specified, build.ninja uses build rules from build-<Config>.ninja by default. All custom commands are executed with this configuration. If the variable is not specified, the first item from CMAKE_CONFIGURATION_TYPES is used instead.",
	"assets/variables.json.CMAKE_DEFAULT_CONFIGS": "Specifies a semicolon-separated list  of configurations to build for a target in build.ninja if no :<Config> suffix is specified in the Ninja Multi-Config generator. If it is set to all, all configurations from CMAKE_CROSS_CONFIGS are used. If it is not specified, it defaults to CMAKE_DEFAULT_BUILD_TYPE.",
	"assets/variables.json.CMAKE_DEPENDS_IN_PROJECT_ONLY": "When set to TRUE in a directory, the build system produced by the Makefile Generators is set up to only consider dependencies on source files that appear either in the source or in the binary directories. Changes to source files outside of these directories will not cause rebuilds.",
	"assets/variables.json.CMAKE_DEPENDS_USE_COMPILER": "For the Makefile Generators, source dependencies are now, for a selection of compilers, generated by the compiler itself. By defining this variable with value FALSE, you can restore the legacy behavior (i.e. using CMake for dependencies discovery).",
	"assets/variables.json.CMAKE_DIRECTORY_LABELS": "Specify labels for the current directory.",
	"assets/variables.json.CMAKE_DISABLE_FIND_PACKAGE_PackageName": "Variable for disabling find_package calls.",
	"assets/variables.json.CMAKE_DISABLE_PRECOMPILE_HEADERS": "Default value for DISABLE_PRECOMPILE_HEADERS of targets.",
	"assets/variables.json.CMAKE_DLL_NAME_WITH_SOVERSION": "This variable is used to initialize the DLL_NAME_WITH_SOVERSION property on shared library targets for the Windows platform, which is selected when the WIN32 variable is set.",
	"assets/variables.json.CMAKE_DL_LIBS": "Name of library containing dlopen and dlclose.",
	"assets/variables.json.CMAKE_DOTNET_SDK": "Default value for DOTNET_SDK property of targets.",
	"assets/variables.json.CMAKE_DOTNET_TARGET_FRAMEWORK": "Default value for DOTNET_TARGET_FRAMEWORK property of targets.",
	"assets/variables.json.CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION": "Default value for DOTNET_TARGET_FRAMEWORK_VERSION property of targets.",
	"assets/variables.json.CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES": "This cache variable is used by the Eclipse project generator. See cmake-generators.",
	"assets/variables.json.CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT": "This cache variable is used by the Eclipse project generator. See cmake-generators.",
	"assets/variables.json.CMAKE_ECLIPSE_MAKE_ARGUMENTS": "This cache variable is used by the Eclipse project generator. See cmake-generators.",
	"assets/variables.json.CMAKE_ECLIPSE_RESOURCE_ENCODING": "This cache variable tells the Eclipse CDT4 project generator to set the resource encoding to the given value in generated project files. If no value is given, no encoding will be set.",
	"assets/variables.json.CMAKE_ECLIPSE_VERSION": "This cache variable is used by the Eclipse project generator. See cmake-generators.",
	"assets/variables.json.CMAKE_EDIT_COMMAND": "Full path to cmake-gui or ccmake. Defined only for Makefile Generators and Ninja Generators when not using any Extra Generators.",
	"assets/variables.json.CMAKE_ENABLE_EXPORTS": "Specify whether executables export symbols for loadable modules.",
	"assets/variables.json.CMAKE_ERROR_DEPRECATED": "Whether to issue errors for deprecated functionality.",
	"assets/variables.json.CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": "Ask cmake_install.cmake script to error out as soon as a file with absolute INSTALL DESTINATION is encountered.",
	"assets/variables.json.CMAKE_EXECUTABLE_ENABLE_EXPORTS": "Specify whether executables export symbols for loadable modules.",
	"assets/variables.json.CMAKE_EXECUTABLE_SUFFIX": "The suffix for executables on this platform.",
	"assets/variables.json.CMAKE_EXECUTABLE_SUFFIX_LANG": "The suffix to use for the end of an executable filename of <LANG> compiler target architecture, if any.",
	"assets/variables.json.CMAKE_EXECUTE_PROCESS_COMMAND_ECHO": "If this variable is set to STDERR, STDOUT or NONE then commands in execute_process calls will be printed to either stderr or stdout or not at all.",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS": "Linker flags to be used to create executables.",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_CONFIG": "Flags to be used when linking an executable.",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_CONFIG_INIT": "Value used to initialize the CMAKE_EXE_LINKER_FLAGS_ cache entry the first time a build tree is configured. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_INIT": "Value used to initialize the CMAKE_EXE_LINKER_FLAGS cache entry the first time a build tree is configured. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_EXPORT_COMPILE_COMMANDS": "Enable/Disable output of compile commands during generation.",
	"assets/variables.json.CMAKE_EXPORT_FIND_PACKAGE_NAME": "Initializes the value of EXPORT_FIND_PACKAGE_NAME.",
	"assets/variables.json.CMAKE_EXPORT_NO_PACKAGE_REGISTRY": "Disable the export command when CMP0090 is not set to NEW.",
	"assets/variables.json.CMAKE_EXPORT_PACKAGE_REGISTRY": "Enables the export command when CMP0090 is set to NEW.",
	"assets/variables.json.CMAKE_EXTRA_GENERATOR": "The extra generator used to build the project. See cmake-generators.",
	"assets/variables.json.CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": "Additional suffixes for shared libraries.",
	"assets/variables.json.CMAKE_FIND_APPBUNDLE": "This variable affects how find_* commands choose between macOS Application Bundles and unix-style package components.",
	"assets/variables.json.CMAKE_FIND_DEBUG_MODE": "Print extra find call information for the following commands to standard error:",
	"assets/variables.json.CMAKE_FIND_FRAMEWORK": "This variable affects how find_* commands choose between macOS Frameworks and unix-style package components.",
	"assets/variables.json.CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX": "Specify a <suffix> to tell the find_library command to search in a lib<suffix> directory before each lib directory that would normally be searched.",
	"assets/variables.json.CMAKE_FIND_LIBRARY_PREFIXES": "Prefixes to prepend when looking for libraries.",
	"assets/variables.json.CMAKE_FIND_LIBRARY_SUFFIXES": "Suffixes to append when looking for libraries.",
	"assets/variables.json.CMAKE_FIND_NO_INSTALL_PREFIX": "Exclude the values of the CMAKE_INSTALL_PREFIX and CMAKE_STAGING_PREFIX variables from CMAKE_SYSTEM_PREFIX_PATH. CMake adds these project-destination prefixes to CMAKE_SYSTEM_PREFIX_PATH by default in order to support building a series of dependent packages and installing them into a common prefix. Set CMAKE_FIND_NO_INSTALL_PREFIX to TRUE to suppress this behavior.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NAME": "Defined by the find_package command while loading a find module to record the caller-specified package name. See command documentation for details.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY": "By default this variable is not set. If neither CMAKE_FIND_USE_PACKAGE_REGISTRY nor CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY is set, then find_package() will use the User Package Registry unless the NO_CMAKE_PACKAGE_REGISTRY option is provided.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY": "By default this variable is not set. If neither CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY nor CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY is set, then find_package() will use the System Package Registry unless the NO_CMAKE_SYSTEM_PACKAGE_REGISTRY option is provided.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_PREFER_CONFIG": "Tell find_package to try \"Config\" mode before \"Module\" mode if no mode was specified.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_REDIRECTS_DIR": "This read-only variable specifies a directory that the find_package command will check first before searching anywhere else for a module or config package file. A config package file in this directory will always be found in preference to any other Find module file or config package file.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS": "Set to TRUE to tell find_package calls to resolve symbolic links in the value of <PackageName>_DIR.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_SORT_DIRECTION": "The sorting direction used by CMAKE_FIND_PACKAGE_SORT_ORDER. It can assume one of the following values:",
	"assets/variables.json.CMAKE_FIND_PACKAGE_SORT_ORDER": "The default order for sorting packages found using find_package. It can assume one of the following values:",
	"assets/variables.json.CMAKE_FIND_PACKAGE_TARGETS_GLOBAL": "Setting to TRUE promotes all IMPORTED targets discoverd by find_package to a GLOBAL scope.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_WARN_NO_MODULE": "Tell find_package to warn if called without an explicit mode.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH": "Semicolon-separated list  of root paths to search on the filesystem.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": "This variable controls whether the CMAKE_FIND_ROOT_PATH and CMAKE_SYSROOT are used by FIND_XXX.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": "This variable controls whether the CMAKE_FIND_ROOT_PATH and CMAKE_SYSROOT are used by FIND_XXX.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": "This variable controls whether the CMAKE_FIND_ROOT_PATH and CMAKE_SYSROOT are used by FIND_XXX.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": "This variable controls whether the CMAKE_FIND_ROOT_PATH and CMAKE_SYSROOT are used by FIND_XXX.",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH": "Controls the default behavior of the following commands for whether or not to search paths provided by cmake-specific environment variables:",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_PATH": "Controls the default behavior of the following commands for whether or not to search paths provided by cmake-specific cache variables:",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_SYSTEM_PATH": "Controls the default behavior of the following commands for whether or not to search paths provided by platform-specific cmake variables:",
	"assets/variables.json.CMAKE_FIND_USE_INSTALL_PREFIX": "Controls the default behavior of the following commands for whether or not to search the locations in the CMAKE_INSTALL_PREFIX and CMAKE_STAGING_PREFIX variables.",
	"assets/variables.json.CMAKE_FIND_USE_PACKAGE_REGISTRY": "Controls the default behavior of the find_package command for whether or not to search paths provided by the User Package Registry.",
	"assets/variables.json.CMAKE_FIND_USE_PACKAGE_ROOT_PATH": "Controls the default behavior of the following commands for whether or not to search paths provided by <PackageName>_ROOT variables:",
	"assets/variables.json.CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH": "Controls the default behavior of the following commands for whether or not to search paths provided by standard system environment variables:",
	"assets/variables.json.CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY": "Controls searching the System Package Registry by the find_package command.",
	"assets/variables.json.CMAKE_FOLDER": "Set the folder name. Use to organize targets in an IDE.",
	"assets/variables.json.CMAKE_Fortran_FORMAT": "Set to FIXED or FREE to indicate the Fortran source layout.",
	"assets/variables.json.CMAKE_Fortran_MODDIR_DEFAULT": "Fortran default module output directory.",
	"assets/variables.json.CMAKE_Fortran_MODDIR_FLAG": "Fortran flag for module output directory.",
	"assets/variables.json.CMAKE_Fortran_MODOUT_FLAG": "Fortran flag to enable module output.",
	"assets/variables.json.CMAKE_Fortran_MODULE_DIRECTORY": "Fortran module output directory.",
	"assets/variables.json.CMAKE_Fortran_PREPROCESS": "Default value for Fortran_PREPROCESS of targets.",
	"assets/variables.json.CMAKE_FRAMEWORK": "Default value for FRAMEWORK of targets.",
	"assets/variables.json.CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG": "Default framework filename postfix under configuration <CONFIG> when using a multi-config generator.",
	"assets/variables.json.CMAKE_FRAMEWORK_PATH": "Semicolon-separated list  of directories specifying a search path for macOS frameworks used by the find_library, find_package, find_path, and find_file commands.",
	"assets/variables.json.CMAKE_GENERATOR": "The generator used to build the project. See cmake-generators.",
	"assets/variables.json.CMAKE_GENERATOR_INSTANCE": "Generator-specific instance specification provided by user.",
	"assets/variables.json.CMAKE_GENERATOR_PLATFORM": "Generator-specific target platform specification provided by user.",
	"assets/variables.json.CMAKE_GENERATOR_TOOLSET": "Native build system toolset specification provided by user.",
	"assets/variables.json.CMAKE_GHS_NO_SOURCE_GROUP_FILE": "ON / OFF boolean to control if the project file for a target should be one single file or multiple files. Refer to GHS_NO_SOURCE_GROUP_FILE for further details.",
	"assets/variables.json.CMAKE_GLOBAL_AUTOGEN_TARGET": "Switch to enable generation of a global autogen target.",
	"assets/variables.json.CMAKE_GLOBAL_AUTOGEN_TARGET_NAME": "Change the name of the global autogen target.",
	"assets/variables.json.CMAKE_GLOBAL_AUTORCC_TARGET": "Switch to enable generation of a global autorcc target.",
	"assets/variables.json.CMAKE_GLOBAL_AUTORCC_TARGET_NAME": "Change the name of the global autorcc target.",
	"assets/variables.json.CMAKE_GNUtoMS": "Convert GNU import libraries (.dll.a) to MS format (.lib).",
	"assets/variables.json.CMAKE_HIP_ARCHITECTURES": "List of GPU architectures to for which to generate device code. Architecture names are interpreted based on CMAKE_HIP_PLATFORM.",
	"assets/variables.json.CMAKE_HIP_COMPILE_FEATURES": "List of features known to the HIP compiler",
	"assets/variables.json.CMAKE_HIP_EXTENSIONS": "Default value for HIP_EXTENSIONS target property if set when a target is created.",
	"assets/variables.json.CMAKE_HIP_PLATFORM": "GPU platform for which HIP language sources are to be compiled.",
	"assets/variables.json.CMAKE_HIP_STANDARD": "Default value for HIP_STANDARD target property if set when a target is created.",
	"assets/variables.json.CMAKE_HIP_STANDARD_REQUIRED": "Default value for HIP_STANDARD_REQUIRED target property if set when a target is created.",
	"assets/variables.json.CMAKE_HOME_DIRECTORY": "Path to top of source tree. Same as CMAKE_SOURCE_DIR.",
	"assets/variables.json.CMAKE_HOST_APPLE": "True for Apple macOS operating systems.",
	"assets/variables.json.CMAKE_HOST_BSD": "Set to a string value when the host system is BSD. This value can be one of the following: DragonFlyBSD, FreeBSD, OpenBSD, or NetBSD.",
	"assets/variables.json.CMAKE_HOST_LINUX": "Set to true when the host system is Linux.",
	"assets/variables.json.CMAKE_HOST_SOLARIS": "True for Oracle Solaris operating systems.",
	"assets/variables.json.CMAKE_HOST_SYSTEM": "Composite Name of OS CMake is being run on.",
	"assets/variables.json.CMAKE_HOST_SYSTEM_NAME": "Name of the OS CMake is running on.",
	"assets/variables.json.CMAKE_HOST_SYSTEM_PROCESSOR": "The name of the CPU CMake is running on.",
	"assets/variables.json.CMAKE_HOST_SYSTEM_VERSION": "The OS version CMake is running on.",
	"assets/variables.json.CMAKE_HOST_UNIX": "True for UNIX and UNIX like operating systems.",
	"assets/variables.json.CMAKE_HOST_WIN32": "True if the host system is running Windows, including Windows 64-bit and MSYS.",
	"assets/variables.json.CMAKE_IGNORE_PATH": "Semicolon-separated list  of directories to be ignored by the various find...() commands.",
	"assets/variables.json.CMAKE_IGNORE_PREFIX_PATH": "Semicolon-separated list  of search prefixes to be ignored by the find_program, find_library, find_file, and find_path commands. The prefixes are also ignored by the Config mode of the find_package command (Module mode is unaffected). To ignore specific directories instead, see CMAKE_IGNORE_NONPREFIX_VAR.",
	"assets/variables.json.CMAKE_IMPORT_LIBRARY_PREFIX": "The prefix for import libraries that you link to.",
	"assets/variables.json.CMAKE_IMPORT_LIBRARY_SUFFIX": "The suffix for import libraries that you link to.",
	"assets/variables.json.CMAKE_INCLUDE_CURRENT_DIR": "Automatically add the current source and build directories to the include path.",
	"assets/variables.json.CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": "Automatically add the current source and build directories to the INTERFACE_INCLUDE_DIRECTORIES target property.",
	"assets/variables.json.CMAKE_INCLUDE_DIRECTORIES_BEFORE": "Whether to append or prepend directories by default in include_directories.",
	"assets/variables.json.CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": "Whether to force prepending of project include directories.",
	"assets/variables.json.CMAKE_INCLUDE_PATH": "Semicolon-separated list  of directories specifying a search path for the find_file and find_path commands. By default it is empty, it is intended to be set by the project.",
	"assets/variables.json.CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": "Default component used in install commands.",
	"assets/variables.json.CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": "Default permissions for directories created implicitly during installation of files by install and file.",
	"assets/variables.json.CMAKE_INSTALL_MESSAGE": "Specify verbosity of installation script code generated by the install command (using the file command). For paths that are newly installed or updated, installation may print lines like:",
	"assets/variables.json.CMAKE_INSTALL_NAME_DIR": "Directory name for installed targets on Apple platforms.",
	"assets/variables.json.CMAKE_INSTALL_PREFIX": "Install directory used by install.",
	"assets/variables.json.CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT": "CMake sets this variable to a TRUE value when the CMAKE_INSTALL_PREFIX has just been initialized to its default value, typically on the first run of CMake within a new build tree and the CMAKE_INSTALL_PREFIX environment variable is not set on the first run of CMake. This can be used by project code to change the default without overriding a user-provided value:",
	"assets/variables.json.CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH": "Sets the default for whether toolchain-defined rpaths should be removed during installation.",
	"assets/variables.json.CMAKE_INSTALL_RPATH": "The rpath to use for installed targets.",
	"assets/variables.json.CMAKE_INSTALL_RPATH_USE_LINK_PATH": "Add paths to linker search and installed rpath.",
	"assets/variables.json.CMAKE_INTERNAL_PLATFORM_ABI": "An internal variable subject to change.",
	"assets/variables.json.CMAKE_INTERPROCEDURAL_OPTIMIZATION": "Default value for INTERPROCEDURAL_OPTIMIZATION of targets.",
	"assets/variables.json.CMAKE_INTERPROCEDURAL_OPTIMIZATION_CONFIG": "Default value for INTERPROCEDURAL_OPTIMIZATION_ of targets.",
	"assets/variables.json.CMAKE_IOS_INSTALL_COMBINED": "Default value for IOS_INSTALL_COMBINED of targets.",
	"assets/variables.json.CMAKE_ISPC_HEADER_DIRECTORY": "ISPC generated header output directory.",
	"assets/variables.json.CMAKE_ISPC_HEADER_SUFFIX": "Output suffix to be used for ISPC generated headers.",
	"assets/variables.json.CMAKE_ISPC_INSTRUCTION_SETS": "Default value for ISPC_INSTRUCTION_SETS property of targets.",
	"assets/variables.json.CMAKE_JOB_POOLS": "If the JOB_POOLS global property is not set, the value of this variable is used in its place. See JOB_POOLS for additional information.",
	"assets/variables.json.CMAKE_JOB_POOL_COMPILE": "This variable is used to initialize the JOB_POOL_COMPILE property on all the targets. See JOB_POOL_COMPILE for additional information.",
	"assets/variables.json.CMAKE_JOB_POOL_LINK": "This variable is used to initialize the JOB_POOL_LINK property on all the targets. See JOB_POOL_LINK for additional information.",
	"assets/variables.json.CMAKE_JOB_POOL_PRECOMPILE_HEADER": "This variable is used to initialize the JOB_POOL_PRECOMPILE_HEADER property on all the targets. See JOB_POOL_PRECOMPILE_HEADER for additional information.",
	"assets/variables.json.CMAKE_KATE_FILES_MODE": "This cache variable is used by the Kate project generator and controls to what mode the files entry in the project file will be set. See cmake-generators.",
	"assets/variables.json.CMAKE_KATE_MAKE_ARGUMENTS": "This cache variable is used by the Kate project generator. See cmake-generators.",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_MACHINE": "When Cross Compiling for Android this variable contains the toolchain binutils machine name (e.g. gcc -dumpmachine). The binutils typically have a <machine>- prefix on their name.",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX": "When Cross Compiling for Android this variable contains the absolute path prefixing the toolchain GNU compiler and its binutils.",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_SUFFIX": "When Cross Compiling for Android this variable contains the host platform suffix of the toolchain GNU compiler and its binutils.",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_APPEND": "Rule variable to append to a static archive.",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_CREATE": "Rule variable to create a new static archive.",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_FINISH": "Rule variable to finish an existing static archive.",
	"assets/variables.json.CMAKE_LANG_BYTE_ORDER": "Byte order of <LANG> compiler target architecture, if known. If defined and not empty, the value is one of:",
	"assets/variables.json.CMAKE_LANG_CLANG_TIDY": "Default value for <LANG>_CLANG_TIDY target property when <LANG> is C, CXX, OBJC or OBJCXX.",
	"assets/variables.json.CMAKE_LANG_CLANG_TIDY_EXPORT_FIXES_DIR": "Default value for <LANG>_CLANG_TIDY_EXPORT_FIXES_DIR target property when <LANG> is C, CXX, OBJC or OBJCXX.",
	"assets/variables.json.CMAKE_LANG_COMPILER": "The full path to the compiler for LANG.",
	"assets/variables.json.CMAKE_LANG_COMPILER_ABI": "An internal variable subject to change.",
	"assets/variables.json.CMAKE_LANG_COMPILER_AR": "A wrapper around ar adding the appropriate --plugin option for the compiler.",
	"assets/variables.json.CMAKE_LANG_COMPILER_ARCHITECTURE_ID": "An internal variable subject to change.",
	"assets/variables.json.CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN": "The external toolchain for cross-compiling, if supported.",
	"assets/variables.json.CMAKE_LANG_COMPILER_FRONTEND_VARIANT": "Identification string of the compiler frontend variant.",
	"assets/variables.json.CMAKE_LANG_COMPILER_ID": "Compiler identification string.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LAUNCHER": "Default value for <LANG>_COMPILER_LAUNCHER target property. This variable is used to initialize the property on each target as it is created. This is done only when <LANG> is C, CXX, Fortran, HIP, ISPC, OBJC, OBJCXX, or CUDA.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER": "The full path to the linker for LANG.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_FRONTEND_VARIANT": "Identification string of the linker frontend variant.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_ID": "Linker identification string.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_VERSION": "Linker version string.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LOADED": "Defined to true if the language is enabled.",
	"assets/variables.json.CMAKE_LANG_COMPILER_PREDEFINES_COMMAND": "Command that outputs the compiler pre definitions.",
	"assets/variables.json.CMAKE_LANG_COMPILER_RANLIB": "A wrapper around ranlib adding the appropriate --plugin option for the compiler.",
	"assets/variables.json.CMAKE_LANG_COMPILER_TARGET": "The target for cross-compiling, if supported.",
	"assets/variables.json.CMAKE_LANG_COMPILER_VERSION": "Compiler version string.",
	"assets/variables.json.CMAKE_LANG_COMPILER_VERSION_INTERNAL": "An internal variable subject to change.",
	"assets/variables.json.CMAKE_LANG_COMPILE_OBJECT": "Rule variable to compile a single object file.",
	"assets/variables.json.CMAKE_LANG_CPPCHECK": "Default value for <LANG>_CPPCHECK target property. This variable is used to initialize the property on each target as it is created. This is done only when <LANG> is C or CXX.",
	"assets/variables.json.CMAKE_LANG_CPPLINT": "Default value for <LANG>_CPPLINT target property. This variable is used to initialize the property on each target as it is created. This is done only when <LANG> is C or CXX.",
	"assets/variables.json.CMAKE_LANG_CREATE_SHARED_LIBRARY": "Rule variable to create a shared library.",
	"assets/variables.json.CMAKE_LANG_CREATE_SHARED_MODULE": "Rule variable to create a shared module.",
	"assets/variables.json.CMAKE_LANG_CREATE_STATIC_LIBRARY": "Rule variable to create a static library.",
	"assets/variables.json.CMAKE_LANG_EXTENSIONS": "The variations are:",
	"assets/variables.json.CMAKE_LANG_EXTENSIONS_DEFAULT": "Compiler's default extensions mode. Used as the default for the <LANG>_EXTENSIONS target property when CMAKE_<LANG>_EXTENSIONS is not set (see CMP0128).",
	"assets/variables.json.CMAKE_LANG_FLAGS": "Language-wide flags for language <LANG> used when building for all configurations. These flags will be passed to all invocations of the compiler. This includes invocations that drive compiling and those that drive linking.",
	"assets/variables.json.CMAKE_LANG_FLAGS_CONFIG": "Language-wide flags for language <LANG> used when building for the <CONFIG> configuration. These flags will be passed to all invocations of the compiler in the corresponding configuration. This includes invocations that drive compiling and those that drive linking.",
	"assets/variables.json.CMAKE_LANG_FLAGS_CONFIG_INIT": "Value used to initialize the CMAKE_<LANG>_FLAGS_ cache entry the first time a build tree is configured for language <LANG>. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_LANG_FLAGS_DEBUG": "This variable is the Debug variant of the CMAKE_<LANG>_FLAGS_ variable.",
	"assets/variables.json.CMAKE_LANG_FLAGS_DEBUG_INIT": "This variable is the Debug variant of the CMAKE_<LANG>_FLAGS_<CONFIG>_INIT variable.",
	"assets/variables.json.CMAKE_LANG_FLAGS_INIT": "Value used to initialize the CMAKE_<LANG>_FLAGS cache entry the first time a build tree is configured for language <LANG>. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform. For example, the contents of a xxxFLAGS environment variable will be prepended, where xxx will be language-specific but not necessarily the same as <LANG> (e.g. CXXFLAGS for CXX, FFLAGS for Fortran, and so on). This value is a command-line string fragment. Therefore, multiple options should be separated by spaces, and options with spaces should be quoted.",
	"assets/variables.json.CMAKE_LANG_FLAGS_MINSIZEREL": "This variable is the MinSizeRel variant of the CMAKE_<LANG>_FLAGS_ variable.",
	"assets/variables.json.CMAKE_LANG_FLAGS_MINSIZEREL_INIT": "This variable is the MinSizeRel variant of the CMAKE_<LANG>_FLAGS_<CONFIG>_INIT variable.",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELEASE": "This variable is the Release variant of the CMAKE_<LANG>_FLAGS_ variable.",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELEASE_INIT": "This variable is the Release variant of the CMAKE_<LANG>_FLAGS_<CONFIG>_INIT variable.",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELWITHDEBINFO": "This variable is the RelWithDebInfo variant of the CMAKE_<LANG>_FLAGS_ variable.",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELWITHDEBINFO_INIT": "This variable is the RelWithDebInfo variant of the CMAKE_<LANG>_FLAGS_<CONFIG>_INIT variable.",
	"assets/variables.json.CMAKE_LANG_HOST_COMPILER": "This variable is available when <LANG> is CUDA or HIP.",
	"assets/variables.json.CMAKE_LANG_IGNORE_EXTENSIONS": "File extensions that should be ignored by the build.",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES": "Directories implicitly searched by the compiler for header files.",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES": "Implicit linker search path detected for language <LANG>.",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": "Implicit linker framework search path detected for language <LANG>.",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_LIBRARIES": "Implicit link libraries and flags detected for language <LANG>.",
	"assets/variables.json.CMAKE_LANG_INCLUDE_WHAT_YOU_USE": "Default value for <LANG>_INCLUDE_WHAT_YOU_USE target property. This variable is used to initialize the property on each target as it is created. This is done only when <LANG> is C or CXX.",
	"assets/variables.json.CMAKE_LANG_LIBRARY_ARCHITECTURE": "Target architecture library directory name detected for <LANG>.",
	"assets/variables.json.CMAKE_LANG_LINKER_LAUNCHER": "Default value for <LANG>_LINKER_LAUNCHER target property. This variable is used to initialize the property on each target as it is created. This is done only when <LANG> is C, CXX, OBJC, or OBJCXX.",
	"assets/variables.json.CMAKE_LANG_LINKER_PREFERENCE": "An internal variable subject to change.",
	"assets/variables.json.CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES": "An internal variable subject to change.",
	"assets/variables.json.CMAKE_LANG_LINKER_WRAPPER_FLAG": "Defines the syntax of compiler driver option to pass options to the linker tool. It will be used to translate the LINKER: prefix in the link options (see add_link_options and target_link_options).",
	"assets/variables.json.CMAKE_LANG_LINKER_WRAPPER_FLAG_SEP": "This variable is used with CMAKE_<LANG>_LINKER_WRAPPER_FLAG variable to format LINKER: prefix in the link options (see add_link_options and target_link_options).",
	"assets/variables.json.CMAKE_LANG_LINK_EXECUTABLE": "Rule variable to link an executable.",
	"assets/variables.json.CMAKE_LANG_LINK_GROUP_USING_FEATURE": "This variable defines how to link a group of libraries for the specified <FEATURE> when a LINK_GROUP generator expression is used and the link language for the target is <LANG>. For this variable to have any effect, the associated CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED variable must be set to true.",
	"assets/variables.json.CMAKE_LANG_LINK_GROUP_USING_FEATURE_SUPPORTED": "This variable specifies whether the <FEATURE> is supported for the link language <LANG>. If this variable is true, then the <FEATURE> must be defined by CMAKE_<LANG>_LINK_GROUP_USING_, and the more generic CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED and CMAKE_LINK_GROUP_USING_ variables are not used.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FEATURE_ATTRIBUTES": "This variable defines the semantics of the specified link library <FEATURE> when linking with the link language <LANG>. It takes precedence over CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES if that variable is also defined for the same <FEATURE>, but otherwise has similar effects. See CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES for further details.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FILE_FLAG": "Language-specific flag to be used to link a library specified by a path to its file.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FLAG": "Flag to be used to link a library into a shared library or executable.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_SUFFIX": "Language-specific suffix for libraries that you link to.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_USING_FEATURE": "This variable defines how to link a library or framework for the specified <FEATURE> when a LINK_LIBRARY generator expression is used and the link language for the target is <LANG>. For this variable to have any effect, the associated CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED variable must be set to true.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_USING_FEATURE_SUPPORTED": "Set to TRUE if the <FEATURE>, as defined by variable CMAKE_<LANG>_LINK_LIBRARY_USING_, is supported for the linker language <LANG>.",
	"assets/variables.json.CMAKE_LANG_LINK_WHAT_YOU_USE_FLAG": "Linker flag to be used to configure linker so that all specified libraries on the command line will be linked into the target.",
	"assets/variables.json.CMAKE_LANG_OUTPUT_EXTENSION": "Extension for the output of a compile for a single file.",
	"assets/variables.json.CMAKE_LANG_PLATFORM_ID": "An internal variable subject to change.",
	"assets/variables.json.CMAKE_LANG_SIMULATE_ID": "Identification string of the \"simulated\" compiler.",
	"assets/variables.json.CMAKE_LANG_SIMULATE_VERSION": "Version string of \"simulated\" compiler.",
	"assets/variables.json.CMAKE_LANG_SIZEOF_DATA_PTR": "Size of pointer-to-data types for language <LANG>.",
	"assets/variables.json.CMAKE_LANG_SOURCE_FILE_EXTENSIONS": "Extensions of source files for the given language.",
	"assets/variables.json.CMAKE_LANG_STANDARD": "The variations are:",
	"assets/variables.json.CMAKE_LANG_STANDARD_DEFAULT": "The compiler's default standard for the language <LANG>. Empty if the compiler has no conception of standard levels.",
	"assets/variables.json.CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES": "Include directories to be used for every source file compiled with the <LANG> compiler. This is meant for specification of system include directories needed by the language for the current platform. The directories always appear at the end of the include path passed to the compiler.",
	"assets/variables.json.CMAKE_LANG_STANDARD_LATEST": "This variable represents the minimum between the latest version of the standard for language <LANG> which is supported by the current compiler and the latest version which is supported by CMake. Its value will be set to one of the supported values of the corresponding <LANG>_STANDARD target property; see the documentation of that property for a list of supported languages.",
	"assets/variables.json.CMAKE_LANG_STANDARD_LIBRARIES": "Libraries linked into every executable and shared library linked for language <LANG>. This is meant for specification of system libraries needed by the language for the current platform.",
	"assets/variables.json.CMAKE_LANG_STANDARD_REQUIRED": "The variations are:",
	"assets/variables.json.CMAKE_LANG_USING_LINKER_MODE": "This controls how the value of the CMAKE_<LANG>_USING_LINKER_ variable should be interpreted. The supported linker mode values are:",
	"assets/variables.json.CMAKE_LANG_USING_LINKER_TYPE": "This variable defines how to specify the <TYPE> linker for the link step, as controlled by the CMAKE_LINKER_TYPE variable or the LINKER_TYPE target property. Depending on the value of the CMAKE_<LANG>_USING_LINKER_MODE variable, CMAKE_<LANG>_USING_LINKER_<TYPE> can hold compiler flags for the link step, or flags to be given directly to the linker tool.",
	"assets/variables.json.CMAKE_LANG_VISIBILITY_PRESET": "Default value for the <LANG>_VISIBILITY_PRESET target property when a target is created.",
	"assets/variables.json.CMAKE_LIBRARY_ARCHITECTURE": "Target architecture library directory name, if detected.",
	"assets/variables.json.CMAKE_LIBRARY_ARCHITECTURE_REGEX": "Regex matching possible target architecture library directory names.",
	"assets/variables.json.CMAKE_LIBRARY_OUTPUT_DIRECTORY": "Where to put all the LIBRARY  target files when built.",
	"assets/variables.json.CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG": "Where to put all the LIBRARY  target files when built for a specific configuration.",
	"assets/variables.json.CMAKE_LIBRARY_PATH": "Semicolon-separated list  of directories specifying a search path for the find_library command. By default it is empty, it is intended to be set by the project.",
	"assets/variables.json.CMAKE_LIBRARY_PATH_FLAG": "The flag to be used to add a library search path to a compiler.",
	"assets/variables.json.CMAKE_LINKER_TYPE": "Specify which linker will be used for the link step.",
	"assets/variables.json.CMAKE_LINK_DEF_FILE_FLAG": "Linker flag to be used to specify a .def file for dll creation.",
	"assets/variables.json.CMAKE_LINK_DEPENDS_NO_SHARED": "Whether to skip link dependencies on shared library files.",
	"assets/variables.json.CMAKE_LINK_DEPENDS_USE_LINKER": "For the Makefile  and Ninja  generators, link dependencies are now, for a selection of linkers, generated by the linker itself. By defining this variable with value FALSE, you can deactivate this feature.",
	"assets/variables.json.CMAKE_LINK_DIRECTORIES_BEFORE": "Whether to append or prepend directories by default in link_directories.",
	"assets/variables.json.CMAKE_LINK_GROUP_USING_FEATURE": "This variable defines how to link a group of libraries for the specified <FEATURE> when a LINK_GROUP generator expression is used. Both of the following conditions must be met for this variable to have any effect:",
	"assets/variables.json.CMAKE_LINK_GROUP_USING_FEATURE_SUPPORTED": "This variable specifies whether the <FEATURE> is supported regardless of the link language. If this variable is true, then the <FEATURE> must be defined by CMAKE_LINK_GROUP_USING_.",
	"assets/variables.json.CMAKE_LINK_INTERFACE_LIBRARIES": "Default value for LINK_INTERFACE_LIBRARIES of targets.",
	"assets/variables.json.CMAKE_LINK_LIBRARIES_ONLY_TARGETS": "Set this variable to initialize the LINK_LIBRARIES_ONLY_TARGETS property of non-imported targets when they are created. Setting it to true enables an additional check that all items named by target_link_libraries that can be target names are actually names of existing targets. See the target property documentation for details.",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FEATURE_ATTRIBUTES": "This variable defines the behavior of the specified link library <FEATURE>. It specifies how the <FEATURE> interacts with other features, when the <FEATURE> should be applied, and aspects of how the <FEATURE> should be handled when CMake assembles the final linker command line (e.g. de-duplication).",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FILE_FLAG": "Flag to be used to link a library specified by a path to its file.",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FLAG": "Flag to be used to link a library into an executable.",
	"assets/variables.json.CMAKE_LINK_LIBRARY_SUFFIX": "The suffix for libraries that you link to.",
	"assets/variables.json.CMAKE_LINK_LIBRARY_USING_FEATURE": "This variable defines how to link a library or framework for the specified <FEATURE> when a LINK_LIBRARY generator expression is used. Both of the following conditions must be met for this variable to have any effect:",
	"assets/variables.json.CMAKE_LINK_LIBRARY_USING_FEATURE_SUPPORTED": "Set to TRUE if the <FEATURE>, as defined by variable CMAKE_LINK_LIBRARY_USING_, is supported regardless the linker language.",
	"assets/variables.json.CMAKE_LINK_SEARCH_END_STATIC": "End a link line such that static system libraries are used.",
	"assets/variables.json.CMAKE_LINK_SEARCH_START_STATIC": "Assume the linker looks for static libraries by default.",
	"assets/variables.json.CMAKE_LINK_WHAT_YOU_USE": "Default value for LINK_WHAT_YOU_USE target property. This variable is used to initialize the property on each target as it is created.",
	"assets/variables.json.CMAKE_LINK_WHAT_YOU_USE_CHECK": "Defines the command executed after the link step to check libraries usage. This check is currently only defined on ELF platforms with value ldd -u -r.",
	"assets/variables.json.CMAKE_MACOSX_BUNDLE": "Default value for MACOSX_BUNDLE of targets.",
	"assets/variables.json.CMAKE_MACOSX_RPATH": "Whether to use rpaths on macOS and iOS.",
	"assets/variables.json.CMAKE_MAJOR_VERSION": "First version number component of the CMAKE_VERSION variable.",
	"assets/variables.json.CMAKE_MAKE_PROGRAM": "Tool that can launch the native build system. The value may be the full path to an executable or just the tool name if it is expected to be in the PATH.",
	"assets/variables.json.CMAKE_MAP_IMPORTED_CONFIG_CONFIG": "Default value for MAP_IMPORTED_CONFIG_ of targets.",
	"assets/variables.json.CMAKE_MATCH_COUNT": "The number of matches with the last regular expression.",
	"assets/variables.json.CMAKE_MATCH_n": "Capture group <n> matched by the last regular expression, for groups 0 through 9. Group 0 is the entire match. Groups 1 through 9 are the subexpressions captured by () syntax.",
	"assets/variables.json.CMAKE_MAXIMUM_RECURSION_DEPTH": "Maximum recursion depth for CMake scripts. It is intended to be set on the command line with -DCMAKE_MAXIMUM_RECURSION_DEPTH=<x>, or within CMakeLists.txt by projects that require a large recursion depth. Projects that set this variable should provide the user with a way to override it. For example:",
	"assets/variables.json.CMAKE_MESSAGE_CONTEXT": "When enabled by the cmake --log-context command line option or the CMAKE_MESSAGE_CONTEXT_SHOW variable, the message command converts the CMAKE_MESSAGE_CONTEXT list into a dot-separated string surrounded by square brackets and prepends it to each line for messages of log levels NOTICE and below.",
	"assets/variables.json.CMAKE_MESSAGE_CONTEXT_SHOW": "Setting this variable to true enables showing a context with each line logged by the message command (see CMAKE_MESSAGE_CONTEXT for how the context itself is specified).",
	"assets/variables.json.CMAKE_MESSAGE_INDENT": "The message command joins the strings from this list and for log levels of NOTICE and below, it prepends the resultant string to each line of the message.",
	"assets/variables.json.CMAKE_MESSAGE_LOG_LEVEL": "When set, this variable specifies the logging level used by the message command. Valid values are the same as those for the --log-level <cmake --log-level> command line option of the cmake program. If this variable is set and the --log-level <cmake --log-level> command line option is given, the command line option takes precedence.",
	"assets/variables.json.CMAKE_MFC_FLAG": "Use the MFC library for an executable or dll.",
	"assets/variables.json.CMAKE_MINIMUM_REQUIRED_VERSION": "The <min> version of CMake given to the most recent call to the cmake_minimum_required command in the current variable scope or any parent variable scope.",
	"assets/variables.json.CMAKE_MINOR_VERSION": "Second version number component of the CMAKE_VERSION variable.",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS": "Linker flags to be used to create modules.",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_CONFIG": "Flags to be used when linking a module.",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_CONFIG_INIT": "Value used to initialize the CMAKE_MODULE_LINKER_FLAGS_ cache entry the first time a build tree is configured. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_INIT": "Value used to initialize the CMAKE_MODULE_LINKER_FLAGS cache entry the first time a build tree is configured. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_MODULE_PATH": "Semicolon-separated list  of directories, represented using forward slashes, specifying a search path for CMake modules to be loaded by the include or find_package commands before checking the default modules that come with CMake. By default it is empty. It is intended to be set by the project.",
	"assets/variables.json.CMAKE_MSVCIDE_RUN_PATH": "Extra PATH locations that should be used when executing add_custom_command or add_custom_target when using the Visual Studio 12 2013 (or above) generator. This allows for running commands and using dll's that the IDE environment is not aware of.",
	"assets/variables.json.CMAKE_MSVC_DEBUG_INFORMATION_FORMAT": "Select the MSVC debug information format targeting the MSVC ABI. This variable is used to initialize the MSVC_DEBUG_INFORMATION_FORMAT property on all targets as they are created. It is also propagated by calls to the try_compile command into the test project.",
	"assets/variables.json.CMAKE_MSVC_RUNTIME_LIBRARY": "Select the MSVC runtime library for use by compilers targeting the MSVC ABI. This variable is used to initialize the MSVC_RUNTIME_LIBRARY property on all targets as they are created. It is also propagated by calls to the try_compile command into the test project.",
	"assets/variables.json.CMAKE_NETRC": "This variable is used to initialize the NETRC option for the file and file commands. See those commands for additional information.",
	"assets/variables.json.CMAKE_NETRC_FILE": "This variable is used to initialize the NETRC_FILE option for the file and file commands. See those commands for additional information.",
	"assets/variables.json.CMAKE_NINJA_OUTPUT_PATH_PREFIX": "Tell the Ninja Generators to add a prefix to every output path in build.ninja. A trailing slash is appended to the prefix, if missing.",
	"assets/variables.json.CMAKE_NOT_USING_CONFIG_FLAGS": "Skip _BUILD_TYPE flags if true.",
	"assets/variables.json.CMAKE_NO_BUILTIN_CHRPATH": "Do not use the builtin binary editor to fix runtime library search paths on installation.",
	"assets/variables.json.CMAKE_NO_SYSTEM_FROM_IMPORTED": "Default value for NO_SYSTEM_FROM_IMPORTED of targets.",
	"assets/variables.json.CMAKE_OBJCXX_EXTENSIONS": "Default value for OBJCXX_EXTENSIONS target property if set when a target is created.",
	"assets/variables.json.CMAKE_OBJCXX_STANDARD": "Default value for OBJCXX_STANDARD target property if set when a target is created.",
	"assets/variables.json.CMAKE_OBJCXX_STANDARD_REQUIRED": "Default value for OBJCXX_STANDARD_REQUIRED target property if set when a target is created.",
	"assets/variables.json.CMAKE_OBJC_EXTENSIONS": "Default value for OBJC_EXTENSIONS target property if set when a target is created.",
	"assets/variables.json.CMAKE_OBJC_STANDARD": "Default value for OBJC_STANDARD target property if set when a target is created.",
	"assets/variables.json.CMAKE_OBJC_STANDARD_REQUIRED": "Default value for OBJC_STANDARD_REQUIRED target property if set when a target is created.",
	"assets/variables.json.CMAKE_OBJECT_PATH_MAX": "Maximum object file full-path length allowed by native build tools.",
	"assets/variables.json.CMAKE_OPTIMIZE_DEPENDENCIES": "Initializes the OPTIMIZE_DEPENDENCIES target property.",
	"assets/variables.json.CMAKE_OSX_ARCHITECTURES": "Target specific architectures for macOS and iOS.",
	"assets/variables.json.CMAKE_OSX_DEPLOYMENT_TARGET": "Specify the minimum version of the target platform (e.g. macOS or iOS) on which the target binaries are to be deployed. CMake uses this variable value for the -mmacosx-version-min flag or their respective target platform equivalents. For older Xcode versions that shipped multiple macOS SDKs this variable also helps to choose the SDK in case CMAKE_OSX_SYSROOT is unset.",
	"assets/variables.json.CMAKE_OSX_SYSROOT": "Specify the location or name of the macOS platform SDK to be used. CMake uses this value to compute the value of the -isysroot flag or equivalent and to help the find_* commands locate files in the SDK.",
	"assets/variables.json.CMAKE_PARENT_LIST_FILE": "Full path to the CMake file that included the current one.",
	"assets/variables.json.CMAKE_PATCH_VERSION": "Third version number component of the CMAKE_VERSION variable.",
	"assets/variables.json.CMAKE_PCH_INSTANTIATE_TEMPLATES": "This variable is used to initialize the PCH_INSTANTIATE_TEMPLATES property of targets when they are created.",
	"assets/variables.json.CMAKE_PCH_WARN_INVALID": "This variable is used to initialize the PCH_WARN_INVALID property of targets when they are created.",
	"assets/variables.json.CMAKE_PDB_OUTPUT_DIRECTORY": "Output directory for MS debug symbol .pdb files generated by the linker for executable and shared library targets.",
	"assets/variables.json.CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG": "Per-configuration output directory for MS debug symbol .pdb files generated by the linker for executable and shared library targets.",
	"assets/variables.json.CMAKE_PLATFORM_NO_VERSIONED_SONAME": "This variable is used to globally control whether the VERSION and SOVERSION target properties should be used for shared libraries. When set to true, adding version information to each shared library target is disabled.",
	"assets/variables.json.CMAKE_POLICY_DEFAULT_CMPNNNN": "Default for CMake Policy CMP<NNNN> when it is otherwise left unset.",
	"assets/variables.json.CMAKE_POLICY_WARNING_CMPNNNN": "Explicitly enable or disable the warning when CMake Policy CMP<NNNN> has not been set explicitly by cmake_policy or implicitly by cmake_minimum_required. This is meaningful only for the policies that do not warn by default:",
	"assets/variables.json.CMAKE_POSITION_INDEPENDENT_CODE": "Default value for POSITION_INDEPENDENT_CODE of targets.",
	"assets/variables.json.CMAKE_PREFIX_PATH": "Semicolon-separated list  of directories specifying installation prefixes to be searched by the find_package, find_program, find_library, find_file, and find_path commands. Each command will add appropriate subdirectories (like bin, lib, or include) as specified in its own documentation.",
	"assets/variables.json.CMAKE_PROGRAM_PATH": "Semicolon-separated list  of directories specifying a search path for the find_program command. By default it is empty, it is intended to be set by the project.",
	"assets/variables.json.CMAKE_PROJECT_DESCRIPTION": "The description of the top level project.",
	"assets/variables.json.CMAKE_PROJECT_HOMEPAGE_URL": "The homepage URL of the top level project.",
	"assets/variables.json.CMAKE_PROJECT_INCLUDE": "A CMake language file to be included as the last step of all project command calls. This is intended for injecting custom code into project builds without modifying their source. See Code Injection for a more detailed discussion of files potentially included during a project call.",
	"assets/variables.json.CMAKE_PROJECT_INCLUDE_BEFORE": "A CMake language file to be included as the first step of all project command calls. This is intended for injecting custom code into project builds without modifying their source. See Code Injection for a more detailed discussion of files potentially included during a project call.",
	"assets/variables.json.CMAKE_PROJECT_NAME": "The name of the top level project.",
	"assets/variables.json.CMAKE_PROJECT_PROJECT-NAME_INCLUDE": "A CMake language file to be included as the last step of any project command calls that specify <PROJECT-NAME> as the project name. This is intended for injecting custom code into project builds without modifying their source. See Code Injection for a more detailed discussion of files potentially included during a project call.",
	"assets/variables.json.CMAKE_PROJECT_PROJECT-NAME_INCLUDE_BEFORE": "A CMake language file to be included as the first step of any project command calls that specify <PROJECT-NAME> as the project name. This is intended for injecting custom code into project builds without modifying their source. See Code Injection for a more detailed discussion of files potentially included during a project call.",
	"assets/variables.json.CMAKE_PROJECT_TOP_LEVEL_INCLUDES": "Semicolon-separated list  of CMake language files to include as part of the very first project call. The files will be included immediately after the toolchain file has been read (if one is specified) and platform variables have been set, but before any languages have been enabled. Therefore, language-specific variables, including things like CMAKE_<LANG>_COMPILER, might not be set. See Code Injection for a more detailed discussion of files potentially included during a project call.",
	"assets/variables.json.CMAKE_PROJECT_VERSION": "The version of the top level project.",
	"assets/variables.json.CMAKE_PROJECT_VERSION_MAJOR": "The major version of the top level project.",
	"assets/variables.json.CMAKE_PROJECT_VERSION_MINOR": "The minor version of the top level project.",
	"assets/variables.json.CMAKE_PROJECT_VERSION_PATCH": "The patch version of the top level project.",
	"assets/variables.json.CMAKE_PROJECT_VERSION_TWEAK": "The tweak version of the top level project.",
	"assets/variables.json.CMAKE_RANLIB": "Name of randomizing tool for static libraries.",
	"assets/variables.json.CMAKE_REQUIRE_FIND_PACKAGE_PackageName": "Variable for making find_package call REQUIRED.",
	"assets/variables.json.CMAKE_ROOT": "Install directory for running cmake.",
	"assets/variables.json.CMAKE_RULE_MESSAGES": "Specify whether to report a message for each make rule.",
	"assets/variables.json.CMAKE_RUNTIME_OUTPUT_DIRECTORY": "Where to put all the RUNTIME  target files when built.",
	"assets/variables.json.CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG": "Where to put all the RUNTIME  target files when built for a specific configuration.",
	"assets/variables.json.CMAKE_SCRIPT_MODE_FILE": "Full path to the cmake -P script file currently being processed.",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS": "Specify whether shared library generates an import file.",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_PREFIX": "The prefix for shared libraries that you link to.",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_SUFFIX": "The suffix for shared libraries that you link to.",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS": "Linker flags to be used to create shared libraries.",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_CONFIG": "Flags to be used when linking a shared library.",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_CONFIG_INIT": "Value used to initialize the CMAKE_SHARED_LINKER_FLAGS_ cache entry the first time a build tree is configured. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_INIT": "Value used to initialize the CMAKE_SHARED_LINKER_FLAGS cache entry the first time a build tree is configured. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_SHARED_MODULE_PREFIX": "The prefix for loadable modules that you link to.",
	"assets/variables.json.CMAKE_SHARED_MODULE_SUFFIX": "The suffix for shared libraries that you link to.",
	"assets/variables.json.CMAKE_SIZEOF_VOID_P": "Size of a void pointer.",
	"assets/variables.json.CMAKE_SKIP_BUILD_RPATH": "Do not include RPATHs in the build tree.",
	"assets/variables.json.CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": "Don't make the install target depend on the all target.",
	"assets/variables.json.CMAKE_SKIP_INSTALL_RPATH": "Do not include RPATHs in the install tree.",
	"assets/variables.json.CMAKE_SKIP_INSTALL_RULES": "Whether to disable generation of installation rules.",
	"assets/variables.json.CMAKE_SKIP_RPATH": "If true, do not add run time path information.",
	"assets/variables.json.CMAKE_SKIP_TEST_ALL_DEPENDENCY": "Control whether the test target depends on the all target.",
	"assets/variables.json.CMAKE_SOURCE_DIR": "The path to the top level of the source tree.",
	"assets/variables.json.CMAKE_STAGING_PREFIX": "This variable may be set to a path to install to when cross-compiling. This can be useful if the path in CMAKE_SYSROOT is read-only, or otherwise should remain pristine.",
	"assets/variables.json.CMAKE_STATIC_LIBRARY_PREFIX": "The prefix for static libraries that you link to.",
	"assets/variables.json.CMAKE_STATIC_LIBRARY_SUFFIX": "The suffix for static libraries that you link to.",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS": "Flags to be used to create static libraries. These flags will be passed to the archiver when creating a static library.",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_CONFIG": "Flags to be used to create static libraries. These flags will be passed to the archiver when creating a static library in the <CONFIG> configuration.",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_CONFIG_INIT": "Value used to initialize the CMAKE_STATIC_LINKER_FLAGS_ cache entry the first time a build tree is configured. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_INIT": "Value used to initialize the CMAKE_STATIC_LINKER_FLAGS cache entry the first time a build tree is configured. This variable is meant to be set by a toolchain file . CMake may prepend or append content to the value based on the environment and target platform.",
	"assets/variables.json.CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS": "This variable contains a list of env vars as a list of tokens with the syntax var=value.",
	"assets/variables.json.CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE": "If this variable evaluates to ON at the end of the top-level CMakeLists.txt file, the Sublime Text 2 extra generator excludes the build tree from the .sublime-project if it is inside the source tree.",
	"assets/variables.json.CMAKE_SUPPRESS_REGENERATION": "If CMAKE_SUPPRESS_REGENERATION is OFF, which is default, then CMake adds a special target on which all other targets depend that checks the build system and optionally re-runs CMake to regenerate the build system when the target specification source changes.",
	"assets/variables.json.CMAKE_Swift_COMPILATION_MODE": "Specify how Swift compiles a target. This variable is used to initialize the Swift_COMPILATION_MODE property on targets as they are created.",
	"assets/variables.json.CMAKE_Swift_LANGUAGE_VERSION": "Set to the Swift language version number. If not set, the oldest legacy version known to be available in the host Xcode version is assumed:",
	"assets/variables.json.CMAKE_Swift_MODULE_DIRECTORY": "Swift module output directory.",
	"assets/variables.json.CMAKE_Swift_NUM_THREADS": "Number of threads for parallel compilation for Swift targets.",
	"assets/variables.json.CMAKE_SYSROOT": "Path to pass to the compiler in the --sysroot flag.",
	"assets/variables.json.CMAKE_SYSROOT_COMPILE": "Path to pass to the compiler in the --sysroot flag when compiling source files. This is the same as CMAKE_SYSROOT but is used only for compiling sources and not linking.",
	"assets/variables.json.CMAKE_SYSROOT_LINK": "Path to pass to the compiler in the --sysroot flag when linking. This is the same as CMAKE_SYSROOT but is used only for linking and not compiling sources.",
	"assets/variables.json.CMAKE_SYSTEM": "Composite name of operating system CMake is compiling for.",
	"assets/variables.json.CMAKE_SYSTEM_APPBUNDLE_PATH": "Search path for macOS application bundles used by the find_program, and find_package commands. By default it contains the standard directories for the current system. It is not intended to be modified by the project, use CMAKE_APPBUNDLE_PATH for this.",
	"assets/variables.json.CMAKE_SYSTEM_FRAMEWORK_PATH": "Search path for macOS frameworks used by the find_library, find_package, find_path, and find_file commands. By default it contains the standard directories for the current system. It is not intended to be modified by the project, use CMAKE_FRAMEWORK_PATH for this.",
	"assets/variables.json.CMAKE_SYSTEM_IGNORE_PATH": "Semicolon-separated list  of directories to be ignored by the various find...() commands.",
	"assets/variables.json.CMAKE_SYSTEM_IGNORE_PREFIX_PATH": "Semicolon-separated list  of search prefixes to be ignored by the find_program, find_library, find_file, and find_path commands. The prefixes are also ignored by the Config mode of the find_package command (Module mode is unaffected). To ignore specific directories instead, see CMAKE_IGNORE_NONPREFIX_VAR.",
	"assets/variables.json.CMAKE_SYSTEM_INCLUDE_PATH": "Semicolon-separated list  of directories specifying a search path for the find_file and find_path commands. By default this contains the standard directories for the current system. It is not intended to be modified by the project; use CMAKE_INCLUDE_PATH for this. See also CMAKE_SYSTEM_PREFIX_PATH.",
	"assets/variables.json.CMAKE_SYSTEM_LIBRARY_PATH": "Semicolon-separated list  of directories specifying a search path for the find_library command. By default this contains the standard directories for the current system. It is not intended to be modified by the project; use CMAKE_LIBRARY_PATH for this. See also CMAKE_SYSTEM_PREFIX_PATH.",
	"assets/variables.json.CMAKE_SYSTEM_NAME": "The name of the operating system for which CMake is to build. See the CMAKE_SYSTEM_VERSION variable for the OS version.",
	"assets/variables.json.CMAKE_SYSTEM_PREFIX_PATH": "Semicolon-separated list  of directories specifying installation prefixes to be searched by the find_package, find_program, find_library, find_file, and find_path commands. Each command will add appropriate subdirectories (like bin, lib, or include) as specified in its own documentation.",
	"assets/variables.json.CMAKE_SYSTEM_PROCESSOR": "When not cross-compiling, this variable has the same value as the CMAKE_HOST_SYSTEM_PROCESSOR variable. In many cases, this will correspond to the target architecture for the build, but this is not guaranteed. (E.g. on Windows, the host may be AMD64 even when using a MSVC cl compiler with a 32-bit target.)",
	"assets/variables.json.CMAKE_SYSTEM_PROGRAM_PATH": "Semicolon-separated list  of directories specifying a search path for the find_program command. By default this contains the standard directories for the current system. It is not intended to be modified by the project; use CMAKE_PROGRAM_PATH for this. See also CMAKE_SYSTEM_PREFIX_PATH.",
	"assets/variables.json.CMAKE_SYSTEM_VERSION": "The version of the operating system for which CMake is to build. See the CMAKE_SYSTEM_NAME variable for the OS name.",
	"assets/variables.json.CMAKE_TASKING_TOOLSET": "Select the Tasking toolset which provides the compiler",
	"assets/variables.json.CMAKE_TEST_LAUNCHER": "This variable is used to initialize the TEST_LAUNCHER target property of executable targets as they are created. It is used to specify a launcher for running tests, added by the add_test command, that run an executable target.",
	"assets/variables.json.CMAKE_TLS_CAINFO": "Specify the default value for the file and file commands' TLS_CAINFO options. It is unset by default.",
	"assets/variables.json.CMAKE_TLS_VERIFY": "Specify the default value for the file and file commands' TLS_VERIFY options. If this variable is not set, the commands check the CMAKE_TLS_VERIFY environment variable. If neither is set, the default is off.",
	"assets/variables.json.CMAKE_TLS_VERSION": "Specify the default value for the file and file commands' TLS_VERSION option. If this variable is not set, the commands check the CMAKE_TLS_VERSION environment variable.",
	"assets/variables.json.CMAKE_TOOLCHAIN_FILE": "Path to toolchain file supplied to cmake.",
	"assets/variables.json.CMAKE_TRY_COMPILE_CONFIGURATION": "Build configuration used for try_compile and try_run projects.",
	"assets/variables.json.CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES": "Set to a true value to tell the try_compile command not to propagate any platform variables into the test project.",
	"assets/variables.json.CMAKE_TRY_COMPILE_PLATFORM_VARIABLES": "List of variables that the try_compile command source file signature must propagate into the test project in order to target the same platform as the host project.",
	"assets/variables.json.CMAKE_TRY_COMPILE_TARGET_TYPE": "Type of target generated for try_compile calls using the source file signature. Valid values are:",
	"assets/variables.json.CMAKE_TWEAK_VERSION": "Defined to 0 for compatibility with code written for older CMake versions that may have defined higher values.",
	"assets/variables.json.CMAKE_UNITY_BUILD": "This variable is used to initialize the UNITY_BUILD property of targets when they are created. Setting it to true enables batch compilation of multiple sources within each target. This feature is known as a Unity or Jumbo build.",
	"assets/variables.json.CMAKE_UNITY_BUILD_BATCH_SIZE": "This variable is used to initialize the UNITY_BUILD_BATCH_SIZE property of targets when they are created. It specifies the default upper limit on the number of source files that may be combined in any one unity source file when unity builds are enabled for a target.",
	"assets/variables.json.CMAKE_UNITY_BUILD_UNIQUE_ID": "This variable is used to initialize the UNITY_BUILD_UNIQUE_ID property of targets when they are created. It specifies the name of the unique identifier generated per file in a unity build.",
	"assets/variables.json.CMAKE_USER_MAKE_RULES_OVERRIDE": "Specify a CMake file that overrides platform information.",
	"assets/variables.json.CMAKE_USER_MAKE_RULES_OVERRIDE_LANG": "Specify a CMake file that overrides platform information for <LANG>.",
	"assets/variables.json.CMAKE_USE_RELATIVE_PATHS": "This variable has no effect. The partially implemented effect it had in previous releases was removed in CMake 3.4.",
	"assets/variables.json.CMAKE_VERBOSE_MAKEFILE": "Enable verbose output from Makefile builds.",
	"assets/variables.json.CMAKE_VERIFY_INTERFACE_HEADER_SETS": "This variable is used to initialize the VERIFY_INTERFACE_HEADER_SETS property of targets when they are created. Setting it to true enables header set verification.",
	"assets/variables.json.CMAKE_VERSION": "The CMake version string as three non-negative integer components separated by . and possibly followed by - and other information. The first two components represent the feature level and the third component represents either a bug-fix level or development date.",
	"assets/variables.json.CMAKE_VISIBILITY_INLINES_HIDDEN": "Default value for the VISIBILITY_INLINES_HIDDEN target property when a target is created.",
	"assets/variables.json.CMAKE_VS_DEBUGGER_COMMAND": "This variable is used to initialize the VS_DEBUGGER_COMMAND property on each target as it is created. See that target property for additional information.",
	"assets/variables.json.CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS": "This variable is used to initialize the VS_DEBUGGER_COMMAND_ARGUMENTS property on each target as it is created. See that target property for additional information.",
	"assets/variables.json.CMAKE_VS_DEBUGGER_ENVIRONMENT": "This variable is used to initialize the VS_DEBUGGER_ENVIRONMENT property on each target as it is created. See that target property for additional information.",
	"assets/variables.json.CMAKE_VS_DEBUGGER_WORKING_DIRECTORY": "This variable is used to initialize the VS_DEBUGGER_WORKING_DIRECTORY property on each target as it is created. See that target property for additional information.",
	"assets/variables.json.CMAKE_VS_DEVENV_COMMAND": "The generators for Visual Studio 12 2013 and above set this variable to the devenv.com command installed with the corresponding Visual Studio version. Note that this variable may be empty on Visual Studio Express editions because they do not provide this tool.",
	"assets/variables.json.CMAKE_VS_GLOBALS": "List of Key=Value records to be set per target as target properties VS_GLOBAL_ with variable=Key and value Value.",
	"assets/variables.json.CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD": "Include INSTALL target to default build.",
	"assets/variables.json.CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD": "Include PACKAGE target to default build.",
	"assets/variables.json.CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": "When generating for Visual Studio 12 2013 or greater with the Intel Fortran plugin installed, this specifies the .vfproj project file format version. This is intended for internal use by CMake and should not be used by project code.",
	"assets/variables.json.CMAKE_VS_JUST_MY_CODE_DEBUGGING": "Enable Just My Code with Visual Studio debugger.",
	"assets/variables.json.CMAKE_VS_MSBUILD_COMMAND": "The generators for Visual Studio 12 2013 and above set this variable to the MSBuild.exe command installed with the corresponding Visual Studio version.",
	"assets/variables.json.CMAKE_VS_NO_COMPILE_BATCHING": "Turn off compile batching when using Visual Studio Generators.",
	"assets/variables.json.CMAKE_VS_NsightTegra_VERSION": "When using a Visual Studio generator with the CMAKE_SYSTEM_NAME variable set to Android, this variable contains the version number of the installed NVIDIA Nsight Tegra Visual Studio Edition.",
	"assets/variables.json.CMAKE_VS_NUGET_PACKAGE_RESTORE": "When using a Visual Studio generator, this cache variable controls if msbuild should automatically attempt to restore NuGet packages prior to a build. NuGet packages can be defined using the VS_PACKAGE_REFERENCES property on a target. If no package references are defined, this setting will do nothing.",
	"assets/variables.json.CMAKE_VS_PLATFORM_NAME": "Visual Studio target platform name used by the current generator.",
	"assets/variables.json.CMAKE_VS_PLATFORM_NAME_DEFAULT": "Default for the Visual Studio target platform name for the current generator without considering the value of the CMAKE_GENERATOR_PLATFORM variable. For Visual Studio Generators for VS 2017 and below this is always Win32. For VS 2019 and above this is based on the host platform.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET": "Visual Studio Platform Toolset name.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_CUDA": "NVIDIA CUDA Toolkit version whose Visual Studio toolset to use.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR": "Path to standalone NVIDIA CUDA Toolkit (eg. extracted from installer).",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_FORTRAN": "Fortran compiler to be used by Visual Studio projects.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE": "Visual Studio preferred tool architecture.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_VERSION": "Visual Studio Platform Toolset version.",
	"assets/variables.json.CMAKE_VS_SDK_EXCLUDE_DIRECTORIES": "This variable allows to override Visual Studio default Exclude Directories.",
	"assets/variables.json.CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES": "This variable allows to override Visual Studio default Executable Directories.",
	"assets/variables.json.CMAKE_VS_SDK_INCLUDE_DIRECTORIES": "This variable allows to override Visual Studio default Include Directories.",
	"assets/variables.json.CMAKE_VS_SDK_LIBRARY_DIRECTORIES": "This variable allows to override Visual Studio default Library Directories.",
	"assets/variables.json.CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES": "This variable allows to override Visual Studio default Library WinRT Directories.",
	"assets/variables.json.CMAKE_VS_SDK_REFERENCE_DIRECTORIES": "This variable allows to override Visual Studio default Reference Directories.",
	"assets/variables.json.CMAKE_VS_SDK_SOURCE_DIRECTORIES": "This variable allows to override Visual Studio default Source Directories.",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER": "Visual Studio target framework identifier.",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION": "Visual Studio target framework targets version.",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_VERSION": "Visual Studio target framework version.",
	"assets/variables.json.CMAKE_VS_USE_DEBUG_LIBRARIES": "Indicate to Visual Studio Generators what configurations are considered debug configurations. This controls the UseDebugLibraries setting in each configuration of a .vcxproj file.",
	"assets/variables.json.CMAKE_VS_VERSION_BUILD_NUMBER": "Visual Studio version.",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": "Tell Visual Studio Generators to use the given Windows Target Platform Minimum Version.",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION": "Visual Studio Windows Target Platform Version.",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM": "Override the Windows 10 SDK Maximum Version for VS 2015 and beyond.",
	"assets/variables.json.CMAKE_VS_WINRT_BY_DEFAULT": "Inform Visual Studio Generators for VS 2010 and above that the target platform enables WinRT compilation by default and it needs to be explicitly disabled if /ZW or VS_WINRT_COMPONENT is omitted (as opposed to enabling it when either of those options is present)",
	"assets/variables.json.CMAKE_WARN_DEPRECATED": "Whether to issue warnings for deprecated functionality.",
	"assets/variables.json.CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": "Ask cmake_install.cmake script to warn each time a file with absolute INSTALL DESTINATION is encountered.",
	"assets/variables.json.CMAKE_WATCOM_RUNTIME_LIBRARY": "Select the Watcom runtime library for use by compilers targeting the Watcom ABI. This variable is used to initialize the WATCOM_RUNTIME_LIBRARY property on all targets as they are created. It is also propagated by calls to the try_compile command into the test project.",
	"assets/variables.json.CMAKE_WIN32_EXECUTABLE": "Default value for WIN32_EXECUTABLE of targets.",
	"assets/variables.json.CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS": "Default value for WINDOWS_EXPORT_ALL_SYMBOLS target property. This variable is used to initialize the property on each target as it is created.",
	"assets/variables.json.CMAKE_XCODE_ATTRIBUTE_an-attribute": "Set Xcode target attributes directly.",
	"assets/variables.json.CMAKE_XCODE_BUILD_SYSTEM": "Xcode build system selection.",
	"assets/variables.json.CMAKE_XCODE_GENERATE_SCHEME": "If enabled, the Xcode generator will generate schema files. These are useful to invoke analyze, archive, build-for-testing and test actions from the command line.",
	"assets/variables.json.CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY": "If enabled, the Xcode generator will generate only a single Xcode project file for the topmost project() command instead of generating one for every project() command.",
	"assets/variables.json.CMAKE_XCODE_LINK_BUILD_PHASE_MODE": "This variable is used to initialize the XCODE_LINK_BUILD_PHASE_MODE property on targets. It affects the methods that the Xcode generator uses to link different kinds of libraries. Its default value is NONE.",
	"assets/variables.json.CMAKE_XCODE_PLATFORM_TOOLSET": "Xcode compiler selection.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER": "Whether to enable Address Sanitizer in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": "Whether to enable Detect use of stack after return in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": "Whether to enable Allow debugging when using document Versions Browser in the Options section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": "Whether to disable the Main Thread Checker in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": "Whether to enable Dynamic Library Loads in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": "Whether to enable Dynamic Linker API usage in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": "Property value for Metal: API Validation in the Options section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": "Property value for GPU Frame Capture in the Options section of the generated Xcode scheme. Example values are Metal and Disabled.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": "Property value for Metal: Shader Validation in the Options section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENVIRONMENT": "Specify environment variables that should be added to the Arguments section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_GUARD_MALLOC": "Whether to enable Guard Malloc in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION": "Set the build configuration to run the target.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_LAUNCH_MODE": "Property value for Launch in the Info section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": "Whether to enable the Main Thread Checker option Pause on issues in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES": "Whether to enable Malloc Guard Edges in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE": "Whether to enable Malloc Scribble in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_STACK": "Whether to enable Malloc Stack in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_THREAD_SANITIZER": "Whether to enable Thread Sanitizer in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP": "Whether to enable Thread Sanitizer - Pause on issues in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": "Whether to enable Undefined Behavior Sanitizer in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": "Whether to enable Undefined Behavior Sanitizer option Pause on issues in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_WORKING_DIRECTORY": "Specify the Working Directory of the Run and Profile actions in the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS": "Whether to enable Zombie Objects in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.CMAKE_XCODE_XCCONFIG": "If set, the Xcode generator will register the specified file as a global XCConfig file. For target-level XCConfig files see the XCODE_XCCONFIG target property.",
	"assets/variables.json.CPACK_ABSOLUTE_DESTINATION_FILES": "List of files which have been installed using an ABSOLUTE DESTINATION path.",
	"assets/variables.json.CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": "Boolean toggle to include/exclude top level directory (component case).",
	"assets/variables.json.CPACK_CUSTOM_INSTALL_VARIABLES": "CPack variables (set via e.g. cpack -D, CPackConfig.cmake or CPACK_PROJECT_CONFIG_FILE scripts) are not directly visible in installation scripts. Instead, one can pass a list of varName=value pairs in the CPACK_CUSTOM_INSTALL_VARIABLES variable. At install time, each list item will result in a variable of the specified name (varName) being set to the given value. The = can be omitted for an empty value.",
	"assets/variables.json.CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": "Ask CPack to error out as soon as a file with absolute INSTALL DESTINATION is encountered.",
	"assets/variables.json.CPACK_INCLUDE_TOPLEVEL_DIRECTORY": "Boolean toggle to include/exclude top level directory.",
	"assets/variables.json.CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": "Default permissions for implicitly created directories during packaging.",
	"assets/variables.json.CPACK_PACKAGING_INSTALL_PREFIX": "The prefix used in the built package.",
	"assets/variables.json.CPACK_SET_DESTDIR": "Boolean toggle to make CPack use DESTDIR mechanism when packaging.",
	"assets/variables.json.CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": "Ask CPack to warn each time a file with absolute INSTALL DESTINATION is encountered.",
	"assets/variables.json.CTEST_BINARY_DIRECTORY": "Specify the CTest BuildDirectory setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_BUILD_COMMAND": "Specify the CTest MakeCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_BUILD_NAME": "Specify the CTest BuildName setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_BZR_COMMAND": "Specify the CTest BZRCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_BZR_UPDATE_OPTIONS": "Specify the CTest BZRUpdateOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_CHANGE_ID": "Specify the CTest ChangeId setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_CHECKOUT_COMMAND": "Tell the ctest_start command how to checkout or initialize the source directory in a ctest dashboard client script.",
	"assets/variables.json.CTEST_CONFIGURATION_TYPE": "Specify the CTest DefaultCTestConfigurationType setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_CONFIGURE_COMMAND": "Specify the CTest ConfigureCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_COVERAGE_COMMAND": "Specify the CTest CoverageCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_COVERAGE_EXTRA_FLAGS": "Specify the CTest CoverageExtraFlags setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_CURL_OPTIONS": "Specify the CTest CurlOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_CUSTOM_COVERAGE_EXCLUDE": "A list of regular expressions which will be used to exclude files by their path from coverage output by the ctest_coverage command.",
	"assets/variables.json.CTEST_CUSTOM_ERROR_EXCEPTION": "A list of regular expressions which will be used to exclude when detecting error messages in build outputs by the ctest_build command.",
	"assets/variables.json.CTEST_CUSTOM_ERROR_MATCH": "A list of regular expressions which will be used to detect error messages in build outputs by the ctest_build command.",
	"assets/variables.json.CTEST_CUSTOM_ERROR_POST_CONTEXT": "The number of lines to include as context which follow an error message by the ctest_build command. The default is 10.",
	"assets/variables.json.CTEST_CUSTOM_ERROR_PRE_CONTEXT": "The number of lines to include as context which precede an error message by the ctest_build command. The default is 10.",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE": "When saving a failing test's output, this is the maximum size, in bytes, that will be collected by the ctest_test command. Defaults to 307200 (300 KiB). See CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION for possible truncation modes.",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS": "The maximum number of errors in a single build step which will be detected. After this, the ctest_test command will truncate the output. Defaults to 50.",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS": "The maximum number of warnings in a single build step which will be detected. After this, the ctest_test command will truncate the output. Defaults to 50.",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE": "When saving a passing test's output, this is the maximum size, in bytes, that will be collected by the ctest_test command. Defaults to 1024 (1 KiB). See CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION for possible truncation modes.",
	"assets/variables.json.CTEST_CUSTOM_MEMCHECK_IGNORE": "A list of regular expressions to use to exclude tests during the ctest_memcheck command.",
	"assets/variables.json.CTEST_CUSTOM_POST_MEMCHECK": "A list of commands to run at the end of the ctest_memcheck command.",
	"assets/variables.json.CTEST_CUSTOM_POST_TEST": "A list of commands to run at the end of the ctest_test command.",
	"assets/variables.json.CTEST_CUSTOM_PRE_MEMCHECK": "A list of commands to run at the start of the ctest_memcheck command.",
	"assets/variables.json.CTEST_CUSTOM_PRE_TEST": "A list of commands to run at the start of the ctest_test command.",
	"assets/variables.json.CTEST_CUSTOM_TESTS_IGNORE": "A list of test names to be excluded from the set of tests run by the ctest_test command.",
	"assets/variables.json.CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION": "Set the test output truncation mode in case a maximum size is configured via the CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE or CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE variables. By default the tail of the output will be truncated. Other possible values are middle and head.",
	"assets/variables.json.CTEST_CUSTOM_WARNING_EXCEPTION": "A list of regular expressions which will be used to exclude when detecting warning messages in build outputs by the ctest_build command.",
	"assets/variables.json.CTEST_CUSTOM_WARNING_MATCH": "A list of regular expressions which will be used to detect warning messages in build outputs by the ctest_build command.",
	"assets/variables.json.CTEST_CVS_CHECKOUT": "Deprecated. Use CTEST_CHECKOUT_COMMAND instead.",
	"assets/variables.json.CTEST_CVS_COMMAND": "Specify the CTest CVSCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_CVS_UPDATE_OPTIONS": "Specify the CTest CVSUpdateOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_DROP_LOCATION": "Specify the CTest DropLocation setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_DROP_METHOD": "Specify the CTest DropMethod setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_DROP_SITE": "Specify the CTest DropSite setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_DROP_SITE_CDASH": "Specify the CTest IsCDash setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_DROP_SITE_PASSWORD": "Specify the CTest DropSitePassword setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_DROP_SITE_USER": "Specify the CTest DropSiteUser setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_EXTRA_COVERAGE_GLOB": "A list of regular expressions which will be used to find files which should be covered by the ctest_coverage command.",
	"assets/variables.json.CTEST_GIT_COMMAND": "Specify the CTest GITCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_GIT_INIT_SUBMODULES": "Specify the CTest GITInitSubmodules setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_GIT_UPDATE_CUSTOM": "Specify the CTest GITUpdateCustom setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_GIT_UPDATE_OPTIONS": "Specify the CTest GITUpdateOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_HG_COMMAND": "Specify the CTest HGCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_HG_UPDATE_OPTIONS": "Specify the CTest HGUpdateOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_LABELS_FOR_SUBPROJECTS": "Specify the CTest LabelsForSubprojects setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_MEMORYCHECK_COMMAND": "Specify the CTest MemoryCheckCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_MEMORYCHECK_COMMAND_OPTIONS": "Specify the CTest MemoryCheckCommandOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_MEMORYCHECK_SANITIZER_OPTIONS": "Specify the CTest MemoryCheckSanitizerOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_MEMORYCHECK_SUPPRESSIONS_FILE": "Specify the CTest MemoryCheckSuppressionFile setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_MEMORYCHECK_TYPE": "Specify the CTest MemoryCheckType setting in a ctest dashboard client script. Valid values are Valgrind, Purify, BoundsChecker, DrMemory, CudaSanitizer, ThreadSanitizer, AddressSanitizer, LeakSanitizer, MemorySanitizer and UndefinedBehaviorSanitizer.",
	"assets/variables.json.CTEST_NIGHTLY_START_TIME": "Specify the CTest NightlyStartTime setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_P4_CLIENT": "Specify the CTest P4Client setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_P4_COMMAND": "Specify the CTest P4Command setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_P4_OPTIONS": "Specify the CTest P4Options setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_P4_UPDATE_OPTIONS": "Specify the CTest P4UpdateOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_RESOURCE_SPEC_FILE": "Specify the CTest ResourceSpecFile setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_RUN_CURRENT_SCRIPT": "Setting this to 0 prevents ctest from being run again when it reaches the end of a script run by calling ctest -S.",
	"assets/variables.json.CTEST_SCP_COMMAND": "Legacy option. Not used.",
	"assets/variables.json.CTEST_SCRIPT_DIRECTORY": "The directory containing the top-level CTest script. The concept is similar to CMAKE_SOURCE_DIR.",
	"assets/variables.json.CTEST_SITE": "Specify the CTest Site setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_SOURCE_DIRECTORY": "Specify the CTest SourceDirectory setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_SUBMIT_INACTIVITY_TIMEOUT": "Specify the CTest SubmitInactivityTimeout setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_SUBMIT_URL": "Specify the CTest SubmitURL setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_SVN_COMMAND": "Specify the CTest SVNCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_SVN_OPTIONS": "Specify the CTest SVNOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_SVN_UPDATE_OPTIONS": "Specify the CTest SVNUpdateOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_TEST_LOAD": "Specify the TestLoad setting in the CTest Test Step of a ctest dashboard client script. This sets the default value for the TEST_LOAD option of the ctest_test command.",
	"assets/variables.json.CTEST_TEST_TIMEOUT": "Specify the CTest TimeOut setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_TLS_VERIFY": "Specify the CTest TLSVerify setting in a ctest Dashboard Client script or in project CMakeLists.txt code before including the CTest module. The value is a boolean indicating whether to verify the server certificate when submitting to a dashboard via https:// URLs.",
	"assets/variables.json.CTEST_TLS_VERSION": "Specify the CTest TLSVersion setting in a ctest Dashboard Client script or in project CMakeLists.txt code before including the CTest module. The value is a minimum TLS version allowed when submitting to a dashboard via https:// URLs.",
	"assets/variables.json.CTEST_TRIGGER_SITE": "Legacy option. Not used.",
	"assets/variables.json.CTEST_UPDATE_COMMAND": "Specify the CTest UpdateCommand setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_UPDATE_OPTIONS": "Specify the CTest UpdateOptions setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_UPDATE_VERSION_ONLY": "Specify the CTest UpdateVersionOnly  setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_UPDATE_VERSION_OVERRIDE": "Specify the CTest UpdateVersionOverride  setting in a ctest dashboard client script.",
	"assets/variables.json.CTEST_USE_LAUNCHERS": "Specify the CTest UseLaunchers setting in a ctest dashboard client script.",
	"assets/variables.json.CYGWIN": "True for Cygwin.",
	"assets/variables.json.ENV": "Operator to read environment variables.",
	"assets/variables.json.EXECUTABLE_OUTPUT_PATH": "Old executable location variable.",
	"assets/variables.json.GHSMULTI": "1 when using Green Hills MULTI generator.",
	"assets/variables.json.IOS": "Set to 1 when the target system (CMAKE_SYSTEM_NAME) is iOS.",
	"assets/variables.json.LIBRARY_OUTPUT_PATH": "Old library location variable.",
	"assets/variables.json.LINUX": "Set to true when the target system is Linux.",
	"assets/variables.json.MINGW": "Set to a true value when at least one language is enabled with a compiler targeting the GNU ABI on Windows (MinGW).",
	"assets/variables.json.MSVC": "Set to true when the compiler is some version of Microsoft Visual C++ or another compiler simulating the Visual C++ cl command-line syntax.",
	"assets/variables.json.MSVC10": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC11": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC12": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC14": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC60": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC70": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC71": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC80": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC90": "Discouraged. Use the MSVC_VERSION variable instead.",
	"assets/variables.json.MSVC_IDE": "True when using the Microsoft Visual C++ IDE.",
	"assets/variables.json.MSVC_TOOLSET_VERSION": "The toolset version of Microsoft Visual C/C++ being used if any. If MSVC-like is being used, this variable is set based on the version of the compiler as given by the MSVC_VERSION variable.",
	"assets/variables.json.MSVC_VERSION": "The version of Microsoft Visual C/C++ being used if any. If a compiler simulating Visual C++ is being used, this variable is set to the toolset version simulated as given by the _MSC_VER preprocessor definition.",
	"assets/variables.json.MSYS": "True when using the MSYS Makefiles generator.",
	"assets/variables.json.PackageName_ROOT": "Calls to find_package(<PackageName>) will search in prefixes specified by the <PackageName>_ROOT CMake variable, where <PackageName> is the (case-preserved) name given to the find_package call and _ROOT is literal. For example, find_package(Foo) will search prefixes specified in the Foo_ROOT CMake variable (if set). See policy CMP0074.",
	"assets/variables.json.PROJECT-NAME_BINARY_DIR": "Top level binary directory for the named project.",
	"assets/variables.json.PROJECT-NAME_DESCRIPTION": "Value given to the DESCRIPTION option of the most recent call to the project command with project name <PROJECT-NAME>, if any.",
	"assets/variables.json.PROJECT-NAME_HOMEPAGE_URL": "Value given to the HOMEPAGE_URL option of the most recent call to the project command with project name <PROJECT-NAME>, if any.",
	"assets/variables.json.PROJECT-NAME_IS_TOP_LEVEL": "A boolean variable indicating whether the named project was called in a top level CMakeLists.txt file.",
	"assets/variables.json.PROJECT-NAME_SOURCE_DIR": "Top level source directory for the named project.",
	"assets/variables.json.PROJECT-NAME_VERSION": "Value given to the VERSION option of the most recent call to the project command with project name <PROJECT-NAME>, if any.",
	"assets/variables.json.PROJECT-NAME_VERSION_MAJOR": "First version number component of the <PROJECT-NAME>_VERSION variable as set by the project command.",
	"assets/variables.json.PROJECT-NAME_VERSION_MINOR": "Second version number component of the <PROJECT-NAME>_VERSION variable as set by the project command.",
	"assets/variables.json.PROJECT-NAME_VERSION_PATCH": "Third version number component of the <PROJECT-NAME>_VERSION variable as set by the project command.",
	"assets/variables.json.PROJECT-NAME_VERSION_TWEAK": "Fourth version number component of the <PROJECT-NAME>_VERSION variable as set by the project command.",
	"assets/variables.json.PROJECT_BINARY_DIR": "Full path to build directory for project.",
	"assets/variables.json.PROJECT_DESCRIPTION": "Short project description given to the project command.",
	"assets/variables.json.PROJECT_HOMEPAGE_URL": "The homepage URL of the project.",
	"assets/variables.json.PROJECT_IS_TOP_LEVEL": "A boolean variable indicating whether the most recently called project command in the current scope or above was in the top level CMakeLists.txt file.",
	"assets/variables.json.PROJECT_NAME": "Name of the project given to the project command.",
	"assets/variables.json.PROJECT_SOURCE_DIR": "This is the source directory of the last call to the project command made in the current directory scope or one of its parents. Note, it is not affected by calls to project made within a child directory scope (i.e. from within a call to add_subdirectory from the current scope).",
	"assets/variables.json.PROJECT_VERSION": "Value given to the VERSION option of the most recent call to the project command, if any.",
	"assets/variables.json.PROJECT_VERSION_MAJOR": "First version number component of the PROJECT_VERSION variable as set by the project command.",
	"assets/variables.json.PROJECT_VERSION_MINOR": "Second version number component of the PROJECT_VERSION variable as set by the project command.",
	"assets/variables.json.PROJECT_VERSION_PATCH": "Third version number component of the PROJECT_VERSION variable as set by the project command.",
	"assets/variables.json.PROJECT_VERSION_TWEAK": "Fourth version number component of the PROJECT_VERSION variable as set by the project command.",
	"assets/variables.json.UNIX": "Set to True when the target system is UNIX or UNIX-like (e.g. APPLE and CYGWIN). The CMAKE_SYSTEM_NAME variable should be queried if a more specific understanding of the target system is required.",
	"assets/variables.json.WIN32": "Set to True when the target system is Windows, including Win64.",
	"assets/variables.json.WINCE": "True when the CMAKE_SYSTEM_NAME variable is set to WindowsCE.",
	"assets/variables.json.WINDOWS_PHONE": "True when the CMAKE_SYSTEM_NAME variable is set to WindowsPhone.",
	"assets/variables.json.WINDOWS_STORE": "True when the CMAKE_SYSTEM_NAME variable is set to WindowsStore.",
	"assets/variables.json.XCODE": "True when using Xcode generator.",
	"assets/variables.json.XCODE_VERSION": "Version of Xcode (Xcode generator only).",
	"assets/variables.json.ADVANCED": "True if entry should be hidden by default in GUIs.",
	"assets/variables.json.HELPSTRING": "Help associated with entry in GUIs.",
	"assets/variables.json.MODIFIED": "Internal management property. Do not set or get.",
	"assets/variables.json.STRINGS": "Enumerate possible STRING entry values for GUI selection.",
	"assets/variables.json.TYPE": "Widget type for entry in GUIs.",
	"assets/variables.json.VALUE": "Value of a cache entry.",
	"assets/variables.json.ADDITIONAL_CLEAN_FILES": "A Semicolon-separated list  of files or directories that will be removed as a part of the global clean target. It is useful for specifying generated files or directories that are used by multiple targets or by CMake itself, or that are generated in ways which cannot be captured as outputs or byproducts of custom commands.",
	"assets/variables.json.ADDITIONAL_MAKE_CLEAN_FILES": "Additional files to remove during the clean stage.",
	"assets/variables.json.BINARY_DIR": "This read-only directory property reports absolute path to the binary directory corresponding to the source on which it is read.",
	"assets/variables.json.BUILDSYSTEM_TARGETS": "This read-only directory property contains a semicolon-separated list  of buildsystem targets added in the directory by calls to the add_library, add_executable, and add_custom_target commands. The list does not include any Imported Targets or Alias Targets, but does include Interface Libraries. Each entry in the list is the logical name of a target, suitable to pass to the get_property command TARGET option.",
	"assets/variables.json.CACHE_VARIABLES": "List of cache variables available in the current directory.",
	"assets/variables.json.CLEAN_NO_CUSTOM": "Set to true to tell Makefile Generators not to remove the outputs of custom commands for this directory during the make clean operation. This is ignored on other generators because it is not possible to implement.",
	"assets/variables.json.CMAKE_CONFIGURE_DEPENDS": "Tell CMake about additional input files to the configuration process. If any named file is modified the build system will re-run CMake to re-configure the file and generate the build system again.",
	"assets/variables.json.COMPILE_DEFINITIONS": "Preprocessor definitions for compiling a directory's sources.",
	"assets/variables.json.COMPILE_DEFINITIONS_CONFIG": "Ignored. See CMake Policy CMP0043.",
	"assets/variables.json.COMPILE_OPTIONS": "List of options to pass to the compiler.",
	"assets/variables.json.DEFINITIONS": "For CMake 2.4 compatibility only. Use COMPILE_DEFINITIONS instead.",
	"assets/variables.json.EXCLUDE_FROM_ALL": "Set this directory property to a true value on a subdirectory to exclude its targets from the \"all\" target of its ancestors. If excluded, running e.g. make in the parent directory will not build targets the subdirectory by default. This does not affect the \"all\" target of the subdirectory itself. Running e.g. make inside the subdirectory will still build its targets.",
	"assets/variables.json.IMPLICIT_DEPENDS_INCLUDE_TRANSFORM": "Specify #include line transforms for dependencies in a directory.",
	"assets/variables.json.IMPORTED_TARGETS": "This read-only directory property contains a semicolon-separated list  of Imported Targets added in the directory by calls to the add_library and add_executable commands. Each entry in the list is the logical name of a target, suitable to pass to the get_property command TARGET option when called in the same directory.",
	"assets/variables.json.INCLUDE_DIRECTORIES": "List of preprocessor include file search directories.",
	"assets/variables.json.INCLUDE_REGULAR_EXPRESSION": "Include file scanning regular expression.",
	"assets/variables.json.INTERPROCEDURAL_OPTIMIZATION": "This directory property does not exist anymore.",
	"assets/variables.json.INTERPROCEDURAL_OPTIMIZATION_CONFIG": "This directory property does not exist anymore.",
	"assets/variables.json.LABELS": "Specify a list of text labels associated with a directory and all of its subdirectories. This is equivalent to setting the LABELS target property and the LABELS test property on all targets and tests in the current directory and subdirectories. Note: Launchers must enabled to propagate labels to targets.",
	"assets/variables.json.LINK_DIRECTORIES": "List of linker search directories.",
	"assets/variables.json.LINK_OPTIONS": "List of options to use for the link step of shared library, module and executable targets as well as the device link step.",
	"assets/variables.json.LISTFILE_STACK": "The current stack of listfiles being processed.",
	"assets/variables.json.MACROS": "List of macro commands available in the current directory.",
	"assets/variables.json.PARENT_DIRECTORY": "Source directory that added current subdirectory.",
	"assets/variables.json.RULE_LAUNCH_COMPILE": "Specify a launcher for compile rules.",
	"assets/variables.json.RULE_LAUNCH_CUSTOM": "Specify a launcher for custom rules.",
	"assets/variables.json.RULE_LAUNCH_LINK": "Specify a launcher for link rules.",
	"assets/variables.json.SOURCE_DIR": "This read-only directory property reports absolute path to the source directory on which it is read.",
	"assets/variables.json.SUBDIRECTORIES": "This read-only directory property contains a semicolon-separated list  of subdirectories processed so far by the add_subdirectory or subdirs commands. Each entry is the absolute path to the source directory (containing the CMakeLists.txt file). This is suitable to pass to the get_property command DIRECTORY option.",
	"assets/variables.json.SYSTEM": "This directory property is used to initialize the SYSTEM target property for non-imported targets created in that directory. It is set to true by add_subdirectory and FetchContent_Declare when the SYSTEM option is given as an argument to those commands.",
	"assets/variables.json.TESTS": "List of tests.",
	"assets/variables.json.TEST_INCLUDE_FILE": "Deprecated. Use TEST_INCLUDE_FILES instead.",
	"assets/variables.json.TEST_INCLUDE_FILES": "A list of cmake files that will be included when ctest is run.",
	"assets/variables.json.VARIABLES": "List of variables defined in the current directory.",
	"assets/variables.json.VS_GLOBAL_SECTION_POST_section": "Specify a postSolution global section in Visual Studio.",
	"assets/variables.json.VS_GLOBAL_SECTION_PRE_section": "Specify a preSolution global section in Visual Studio.",
	"assets/variables.json.VS_STARTUP_PROJECT": "Specify the default startup project in a Visual Studio solution.",
	"assets/variables.json.ALLOW_DUPLICATE_CUSTOM_TARGETS": "Allow duplicate custom targets to be created.",
	"assets/variables.json.AUTOGEN_SOURCE_GROUP": "Name of the source_group for AUTOMOC, AUTORCC and AUTOUIC generated files.",
	"assets/variables.json.AUTOGEN_TARGETS_FOLDER": "Name of FOLDER for *_autogen targets that are added automatically by CMake for targets for which AUTOMOC is enabled.",
	"assets/variables.json.AUTOMOC_SOURCE_GROUP": "Name of the source_group for AUTOMOC generated files.",
	"assets/variables.json.AUTOMOC_TARGETS_FOLDER": "Name of FOLDER for *_autogen targets that are added automatically by CMake for targets for which AUTOMOC is enabled.",
	"assets/variables.json.AUTORCC_SOURCE_GROUP": "Name of the source_group for AUTORCC generated files.",
	"assets/variables.json.AUTOUIC_SOURCE_GROUP": "Name of the source_group for AUTOUIC generated files.",
	"assets/variables.json.CMAKE_CUDA_KNOWN_FEATURES": "List of CUDA features known to this version of CMake.",
	"assets/variables.json.CMAKE_CXX_KNOWN_FEATURES": "List of C++ features known to this version of CMake.",
	"assets/variables.json.CMAKE_C_KNOWN_FEATURES": "List of C features known to this version of CMake.",
	"assets/variables.json.CMAKE_HIP_KNOWN_FEATURES": "List of HIP features known to this version of CMake.",
	"assets/variables.json.CMAKE_ROLE": "Tells what mode the current running script is in. Could be one of several values:",
	"assets/variables.json.DEBUG_CONFIGURATIONS": "Specify which configurations are for debugging.",
	"assets/variables.json.DISABLED_FEATURES": "List of features which are disabled during the CMake run.",
	"assets/variables.json.ECLIPSE_EXTRA_CPROJECT_CONTENTS": "Additional contents to be inserted into the generated Eclipse cproject file.",
	"assets/variables.json.ECLIPSE_EXTRA_NATURES": "List of natures to add to the generated Eclipse project file.",
	"assets/variables.json.ENABLED_FEATURES": "List of features which are enabled during the CMake run.",
	"assets/variables.json.ENABLED_LANGUAGES": "Read-only property that contains the list of currently enabled languages",
	"assets/variables.json.FIND_LIBRARY_USE_LIB32_PATHS": "Whether the find_library command should automatically search lib32 directories.",
	"assets/variables.json.FIND_LIBRARY_USE_LIB64_PATHS": "Whether find_library should automatically search lib64 directories.",
	"assets/variables.json.FIND_LIBRARY_USE_LIBX32_PATHS": "Whether the find_library command should automatically search libx32 directories.",
	"assets/variables.json.FIND_LIBRARY_USE_OPENBSD_VERSIONING": "Whether find_library should find OpenBSD-style shared libraries.",
	"assets/variables.json.GENERATOR_IS_MULTI_CONFIG": "Read-only property that is true on multi-configuration generators.",
	"assets/variables.json.GLOBAL_DEPENDS_DEBUG_MODE": "Enable global target dependency graph debug mode.",
	"assets/variables.json.GLOBAL_DEPENDS_NO_CYCLES": "Disallow global target dependency graph cycles.",
	"assets/variables.json.INSTALL_PARALLEL": "Enables parallel installation option for the Ninja generator.",
	"assets/variables.json.IN_TRY_COMPILE": "Read-only property that is true during a try-compile configuration.",
	"assets/variables.json.JOB_POOLS": "Ninja only: List of available pools.",
	"assets/variables.json.PACKAGES_FOUND": "List of packages which were found during the CMake run.",
	"assets/variables.json.PACKAGES_NOT_FOUND": "List of packages which were not found during the CMake run.",
	"assets/variables.json.PREDEFINED_TARGETS_FOLDER": "Name of FOLDER for targets that are added automatically by CMake.",
	"assets/variables.json.PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE": "When this global property is set to true, the CMAKE_PROJECT_TOP_LEVEL_INCLUDES variable is propagated into try_compile calls that use the whole-project signature . Calls to the source file signature  are not affected by this property. PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE is unset by default.",
	"assets/variables.json.REPORT_UNDEFINED_PROPERTIES": "If set, report any undefined properties to this file.",
	"assets/variables.json.RULE_MESSAGES": "Specify whether to report a message for each make rule.",
	"assets/variables.json.TARGET_ARCHIVES_MAY_BE_SHARED_LIBS": "Set if shared libraries may be named like archives.",
	"assets/variables.json.TARGET_MESSAGES": "Specify whether to report the completion of each target.",
	"assets/variables.json.TARGET_SUPPORTS_SHARED_LIBS": "Does the target platform support shared libraries.",
	"assets/variables.json.USE_FOLDERS": "Controls whether to use the FOLDER target property to organize targets into folders. The value of USE_FOLDERS at the end of the top level CMakeLists.txt file is what determines the behavior.",
	"assets/variables.json.XCODE_EMIT_EFFECTIVE_PLATFORM_NAME": "Control emission of EFFECTIVE_PLATFORM_NAME by the Xcode generator.",
	"assets/variables.json.CPACK_DESKTOP_SHORTCUTS": "Species a list of shortcut names that should be created on the Desktop for this file.",
	"assets/variables.json.CPACK_NEVER_OVERWRITE": "Request that this file not be overwritten on install or reinstall.",
	"assets/variables.json.CPACK_PERMANENT": "Request that this file not be removed on uninstall.",
	"assets/variables.json.CPACK_STARTUP_SHORTCUTS": "Species a list of shortcut names that should be created in the Startup folder for this file.",
	"assets/variables.json.CPACK_START_MENU_SHORTCUTS": "Species a list of shortcut names that should be created in the Start Menu for this file.",
	"assets/variables.json.CPACK_WIX_ACL": "Specifies access permissions for files or directories installed by a WiX installer.",
	"assets/variables.json.ABSTRACT": "Is this source file an abstract class.",
	"assets/variables.json.AUTORCC_OPTIONS": "Additional options for rcc when using AUTORCC",
	"assets/variables.json.AUTOUIC_OPTIONS": "Additional options for uic when using AUTOUIC",
	"assets/variables.json.COMPILE_FLAGS": "Additional flags to be added when compiling this source file.",
	"assets/variables.json.CXX_SCAN_FOR_MODULES": "CXX_SCAN_FOR_MODULES is a boolean specifying whether CMake will scan the source for C++ module dependencies. See also the CXX_SCAN_FOR_MODULES for target-wide settings.",
	"assets/variables.json.EXTERNAL_OBJECT": "If set to true then this is an object file.",
	"assets/variables.json.Fortran_FORMAT": "Set to FIXED or FREE to indicate the Fortran source layout.",
	"assets/variables.json.Fortran_PREPROCESS": "Control whether the Fortran source file should be unconditionally preprocessed.",
	"assets/variables.json.GENERATED": "Is this source file generated as part of the build or CMake process.",
	"assets/variables.json.HEADER_FILE_ONLY": "Is this source file only a header file.",
	"assets/variables.json.KEEP_EXTENSION": "Make the output file have the same extension as the source file.",
	"assets/variables.json.LANGUAGE": "Specify the programming language in which a source file is written.",
	"assets/variables.json.LOCATION": "The full path to a source file.",
	"assets/variables.json.MACOSX_PACKAGE_LOCATION": "Place a source file inside a Application Bundle (MACOSX_BUNDLE), Core Foundation Bundle (BUNDLE), or Framework Bundle (FRAMEWORK). It is applicable for macOS and iOS.",
	"assets/variables.json.OBJECT_DEPENDS": "Additional files on which a compiled object file depends.",
	"assets/variables.json.OBJECT_OUTPUTS": "Additional outputs for a Ninja or Makefile Generators rule.",
	"assets/variables.json.SKIP_AUTOGEN": "Exclude the source file from AUTOMOC, AUTOUIC and AUTORCC processing (for Qt projects).",
	"assets/variables.json.SKIP_AUTOMOC": "Exclude the source file from AUTOMOC processing (for Qt projects).",
	"assets/variables.json.SKIP_AUTORCC": "Exclude the source file from AUTORCC processing (for Qt projects).",
	"assets/variables.json.SKIP_AUTOUIC": "Exclude the source file from AUTOUIC processing (for Qt projects).",
	"assets/variables.json.SKIP_LINTING": "This property allows you to exclude a specific source file from the linting process. The linting process involves running tools such as <LANG>_CPPLINT, <LANG>_CLANG_TIDY, <LANG>_CPPCHECK, and <LANG>_INCLUDE_WHAT_YOU_USE on the source files, as well as compiling header files as part of VERIFY_INTERFACE_HEADER_SETS. By setting SKIP_LINTING on a source file, the mentioned linting tools will not be executed for that particular file.",
	"assets/variables.json.SKIP_PRECOMPILE_HEADERS": "Is this source file skipped by PRECOMPILE_HEADERS feature.",
	"assets/variables.json.SKIP_UNITY_BUILD_INCLUSION": "Setting this property to true ensures the source file will be skipped by unity builds when its associated target has its UNITY_BUILD property set to true. The source file will instead be compiled on its own in the same way as it would with unity builds disabled.",
	"assets/variables.json.Swift_DEPENDENCIES_FILE": "This property sets the path for the Swift dependency file (swiftdeps) for the source. If one is not specified, it will default to <OBJECT>.swiftdeps.",
	"assets/variables.json.Swift_DIAGNOSTICS_FILE": "This property controls where the Swift diagnostics are serialized.",
	"assets/variables.json.SYMBOLIC": "Is this just a name for a rule.",
	"assets/variables.json.UNITY_GROUP": "This property controls which bucket the source will be part of when the UNITY_BUILD_MODE is set to GROUP.",
	"assets/variables.json.VS_COPY_TO_OUT_DIR": "Sets the <CopyToOutputDirectory> tag for a source file in a Visual Studio project file. Valid values are Never, Always and PreserveNewest.",
	"assets/variables.json.VS_CSHARP_tagname": "Visual Studio and CSharp source-file-specific configuration.",
	"assets/variables.json.VS_DEPLOYMENT_CONTENT": "Mark a source file as content for deployment with a Windows Phone or Windows Store application when built with a Visual Studio generators <cmake-generators(7)>. The value must evaluate to either 1 or 0 and may use generator expressions <cmake-generator-expressions(7)> to make the choice based on the build configuration. The .vcxproj file entry for the source file will be marked either DeploymentContent or ExcludedFromBuild for values 1 and 0, respectively.",
	"assets/variables.json.VS_DEPLOYMENT_LOCATION": "Specifies the deployment location for a content source file with a Windows Phone or Windows Store application when built with a Visual Studio generators <cmake-generators(7)>. This property is only applicable when using VS_DEPLOYMENT_CONTENT. The value represent the path relative to the app package and applies to all configurations.",
	"assets/variables.json.VS_INCLUDE_IN_VSIX": "Boolean property to specify if the file should be included within a VSIX (Visual Studio Integration Extension) extension package. This is needed for development of Visual Studio extensions.",
	"assets/variables.json.VS_RESOURCE_GENERATOR": "This property allows to specify the resource generator to be used on this file. It defaults to PublicResXFileCodeGenerator if not set.",
	"assets/variables.json.VS_SETTINGS": "Set any item metadata on a file.",
	"assets/variables.json.VS_SHADER_DISABLE_OPTIMIZATIONS": "Disable compiler optimizations for an .hlsl source file. This adds the -Od flag to the command line for the FxCompiler tool. Specify the value true for this property to disable compiler optimizations.",
	"assets/variables.json.VS_SHADER_ENABLE_DEBUG": "Enable debugging information for an .hlsl source file. This adds the -Zi flag to the command line for the FxCompiler tool. Specify the value true to generate debugging information for the compiled shader.",
	"assets/variables.json.VS_SHADER_ENTRYPOINT": "Specifies the name of the entry point for the shader of a .hlsl source file.",
	"assets/variables.json.VS_SHADER_FLAGS": "Set additional Visual Studio shader flags of a .hlsl source file.",
	"assets/variables.json.VS_SHADER_MODEL": "Specifies the shader model of a .hlsl source file. Some shader types can only be used with recent shader models",
	"assets/variables.json.VS_SHADER_OBJECT_FILE_NAME": "Specifies a file name for the compiled shader object file for an .hlsl source file. This adds the -Fo flag to the command line for the FxCompiler tool.",
	"assets/variables.json.VS_SHADER_OUTPUT_HEADER_FILE": "Set filename for output header file containing object code of a .hlsl source file.",
	"assets/variables.json.VS_SHADER_TYPE": "Set the Visual Studio shader type of a .hlsl source file.",
	"assets/variables.json.VS_SHADER_VARIABLE_NAME": "Set name of variable in header file containing object code of a .hlsl source file.",
	"assets/variables.json.VS_TOOL_OVERRIDE": "Override the default Visual Studio tool that will be applied to the source file with a new tool not based on the extension of the file.",
	"assets/variables.json.VS_XAML_TYPE": "Mark a Extensible Application Markup Language (XAML) source file as a different type than the default Page. The most common usage would be to set the default App.xaml file as ApplicationDefinition.",
	"assets/variables.json.WRAP_EXCLUDE": "Exclude this source file from any code wrapping techniques.",
	"assets/variables.json.XCODE_EXPLICIT_FILE_TYPE": "Set the Xcode explicitFileType attribute on its reference to a source file. CMake computes a default based on file extension but can be told explicitly with this property.",
	"assets/variables.json.XCODE_FILE_ATTRIBUTES": "Add values to the Xcode ATTRIBUTES setting on its reference to a source file. Among other things, this can be used to set the role on a .mig file:",
	"assets/variables.json.XCODE_LAST_KNOWN_FILE_TYPE": "Set the Xcode lastKnownFileType attribute on its reference to a source file. CMake computes a default based on file extension but can be told explicitly with this property.",
	"assets/variables.json.ATTACHED_FILES": "Attach a list of files to a dashboard submission.",
	"assets/variables.json.ATTACHED_FILES_ON_FAIL": "Attach a list of files to a dashboard submission if the test fails.",
	"assets/variables.json.COST": "This property describes the cost of a test. When parallel testing is enabled, tests in the test set will be run in descending order of cost. Projects can explicitly define the cost of a test by setting this property to a floating point value.",
	"assets/variables.json.DEPENDS": "Specifies that this test should only be run after the specified list of tests.",
	"assets/variables.json.DISABLED": "If set to True, the test will be skipped and its status will be 'Not Run'. A DISABLED test will not be counted in the total number of tests and its completion status will be reported to CDash as Disabled.",
	"assets/variables.json.ENVIRONMENT": "Specify environment variables that should be defined for running a test.",
	"assets/variables.json.ENVIRONMENT_MODIFICATION": "Specify environment variables that should be modified for running a test. Note that the operations performed by this property are performed after the ENVIRONMENT property is already applied.",
	"assets/variables.json.FAIL_REGULAR_EXPRESSION": "If the test output (stdout or stderr) matches this regular expression the test will fail, regardless of the process exit code. Tests that exceed the timeout specified by TIMEOUT fail regardless of FAIL_REGULAR_EXPRESSION. Any non-zero return code or system-level test failures including segmentation faults, signal abort, or heap errors fail the test even if the regular expression does not match.",
	"assets/variables.json.FIXTURES_CLEANUP": "Specifies a list of fixtures for which the test is to be treated as a cleanup test. These fixture names are distinct from test case names and are not required to have any similarity to the names of tests associated with them.",
	"assets/variables.json.FIXTURES_REQUIRED": "Specifies a list of fixtures the test requires. Fixture names are case sensitive and they are not required to have any similarity to test names.",
	"assets/variables.json.FIXTURES_SETUP": "Specifies a list of fixtures for which the test is to be treated as a setup test. These fixture names are distinct from test case names and are not required to have any similarity to the names of tests associated with them.",
	"assets/variables.json.GENERATED_RESOURCE_SPEC_FILE": "Path to the dynamically-generated resource spec file <ctest-resource-dynamically-generated-spec-file> generated by this test.",
	"assets/variables.json.MEASUREMENT": "Specify a CDASH measurement and value to be reported for a test.",
	"assets/variables.json.PASS_REGULAR_EXPRESSION": "The test output (stdout or stderr) must match this regular expression for the test to pass. The process exit code is ignored. Tests that exceed the timeout specified by TIMEOUT still fail regardless of PASS_REGULAR_EXPRESSION. System-level test failures including segmentation faults, signal abort, or heap errors may fail the test even if PASS_REGULAR_EXPRESSION is matched.",
	"assets/variables.json.PROCESSORS": "Set to specify how many process slots this test requires. If not set, the default is 1 processor.",
	"assets/variables.json.PROCESSOR_AFFINITY": "Set to a true value to ask CTest to launch the test process with CPU affinity for a fixed set of processors. If enabled and supported for the current platform, CTest will choose a set of processors to place in the CPU affinity mask when launching the test process. The number of processors in the set is determined by the PROCESSORS test property or the number of processors available to CTest, whichever is smaller. The set of processors chosen will be disjoint from the processors assigned to other concurrently running tests that also have the PROCESSOR_AFFINITY property enabled.",
	"assets/variables.json.REQUIRED_FILES": "List of files required to run the test. The filenames are relative to the test WORKING_DIRECTORY unless an absolute path is specified.",
	"assets/variables.json.RESOURCE_GROUPS": "Specify resources required by a test, grouped in a way that is meaningful to the test. See resource allocation <ctest-resource-allocation> for more information on how this property integrates into the CTest resource allocation feature.",
	"assets/variables.json.RESOURCE_LOCK": "Specify a list of resources that are locked by this test.",
	"assets/variables.json.RUN_SERIAL": "Do not run this test in parallel with any other test.",
	"assets/variables.json.SKIP_REGULAR_EXPRESSION": "If the test output (stderr or stdout) matches this regular expression the test will be marked as skipped, regardless of the process exit code. Tests that exceed the timeout specified by TIMEOUT still fail regardless of SKIP_REGULAR_EXPRESSION. System-level test failures including segmentation faults, signal abort, or heap errors may fail the test even if the regular expression matches.",
	"assets/variables.json.SKIP_RETURN_CODE": "Return code to mark a test as skipped.",
	"assets/variables.json.TIMEOUT": "How many seconds to allow for this test.",
	"assets/variables.json.TIMEOUT_AFTER_MATCH": "Change a test's timeout duration after a matching line is encountered in its output.",
	"assets/variables.json.TIMEOUT_SIGNAL_GRACE_PERIOD": "If the TIMEOUT_SIGNAL_NAME test property is set, this property specifies the number of seconds to wait for a test process to terminate after sending the custom signal. Otherwise, this property has no meaning.",
	"assets/variables.json.TIMEOUT_SIGNAL_NAME": "Specify a custom signal to send to a test process when its timeout is reached. This is available only on platforms supporting POSIX signals. It is not available on Windows.",
	"assets/variables.json.WILL_FAIL": "If true, inverts the pass / fail test criteria. Tests for which WILL_FAIL is true fail with return code 0 and pass with non-zero return code. Tests that exceed the timeout specified by TIMEOUT still fail regardless of WILL_FAIL. System-level test failures including segmentation faults, signal abort, or heap errors may fail the test even if WILL_FAIL is true.",
	"assets/variables.json.WORKING_DIRECTORY": "The directory from which the test executable will be called.",
	"assets/variables.json.AIX_EXPORT_ALL_SYMBOLS": "On AIX, CMake automatically exports all symbols from shared libraries, and from executables with the ENABLE_EXPORTS target property set. Explicitly disable this boolean property to suppress the behavior and export no symbols by default. In this case it is expected that the project will use other means to export some symbols.",
	"assets/variables.json.ALIASED_TARGET": "Name of target aliased by this target.",
	"assets/variables.json.ALIAS_GLOBAL": "Read-only property indicating of whether an ALIAS target  is globally visible.",
	"assets/variables.json.ANDROID_ANT_ADDITIONAL_OPTIONS": "Set the additional options for Android Ant build system. This is a string value containing all command line options for the Ant build. This property is initialized by the value of the CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_API": "When Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition, this property sets the Android target API version (e.g. 15). The version number must be a positive decimal integer. This property is initialized by the value of the CMAKE_ANDROID_API variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_API_MIN": "Set the Android MIN API version (e.g. 9). The version number must be a positive decimal integer. This property is initialized by the value of the CMAKE_ANDROID_API_MIN variable if it is set when a target is created. Native code builds using this API version.",
	"assets/variables.json.ANDROID_ARCH": "When Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition, this property sets the Android target architecture.",
	"assets/variables.json.ANDROID_ASSETS_DIRECTORIES": "Set the Android assets directories to copy into the main assets folder before build. This a string property that contains the directory paths separated by semicolon. This property is initialized by the value of the CMAKE_ANDROID_ASSETS_DIRECTORIES variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_GUI": "When Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition, this property specifies whether to build an executable as an application package on Android.",
	"assets/variables.json.ANDROID_JAR_DEPENDENCIES": "Set the Android property that specifies JAR dependencies. This is a string value property. This property is initialized by the value of the CMAKE_ANDROID_JAR_DEPENDENCIES variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_JAR_DIRECTORIES": "Set the Android property that specifies directories to search for the JAR libraries.",
	"assets/variables.json.ANDROID_JAVA_SOURCE_DIR": "Set the Android property that defines the Java source code root directories. This a string property that contains the directory paths separated by semicolon. This property is initialized by the value of the CMAKE_ANDROID_JAVA_SOURCE_DIR variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_NATIVE_LIB_DEPENDENCIES": "Set the Android property that specifies the .so dependencies. This is a string property.",
	"assets/variables.json.ANDROID_NATIVE_LIB_DIRECTORIES": "Set the Android property that specifies directories to search for the .so libraries.",
	"assets/variables.json.ANDROID_PROCESS_MAX": "Set the Android property that defines the maximum number of a parallel Android NDK compiler processes (e.g. 4). This property is initialized by the value of the CMAKE_ANDROID_PROCESS_MAX variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_PROGUARD": "When this property is set to true that enables the ProGuard tool to shrink, optimize, and obfuscate the code by removing unused code and renaming classes, fields, and methods with semantically obscure names. This property is initialized by the value of the CMAKE_ANDROID_PROGUARD variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_PROGUARD_CONFIG_PATH": "Set the Android property that specifies the location of the ProGuard config file. Leave empty to use the default one. This a string property that contains the path to ProGuard config file. This property is initialized by the value of the CMAKE_ANDROID_PROGUARD_CONFIG_PATH variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_SECURE_PROPS_PATH": "Set the Android property that states the location of the secure properties file. This is a string property that contains the file path. This property is initialized by the value of the CMAKE_ANDROID_SECURE_PROPS_PATH variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_SKIP_ANT_STEP": "Set the Android property that defines whether or not to skip the Ant build step. This is a boolean property initialized by the value of the CMAKE_ANDROID_SKIP_ANT_STEP variable if it is set when a target is created.",
	"assets/variables.json.ANDROID_STL_TYPE": "When Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition, this property specifies the type of STL support for the project. This is a string property that could set to the one of the following values:",
	"assets/variables.json.ARCHIVE_OUTPUT_DIRECTORY": "Output directory in which to build XXX target files.",
	"assets/variables.json.ARCHIVE_OUTPUT_DIRECTORY_CONFIG": "Per-configuration output directory for ARCHIVE  target files.",
	"assets/variables.json.ARCHIVE_OUTPUT_NAME": "Output name for XXX target files.",
	"assets/variables.json.ARCHIVE_OUTPUT_NAME_CONFIG": "Per-configuration output name for ARCHIVE  target files.",
	"assets/variables.json.AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG is a boolean property that can be set on a target to have better dependency graph for multi-configuration generators. When this property is enabled, CMake will generate more per-config targets. Thus, the dependency graph will be more accurate for multi-configuration generators and some recompilations will be avoided.",
	"assets/variables.json.AUTOGEN_BUILD_DIR": "Directory where AUTOMOC, AUTOUIC and AUTORCC generate files for the target.",
	"assets/variables.json.AUTOGEN_COMMAND_LINE_LENGTH_MAX": "Command line length limit for autogen targets, i.e. moc or uic, that triggers the use of response files on Windows instead of passing all arguments to the command line.",
	"assets/variables.json.AUTOGEN_ORIGIN_DEPENDS": "Switch for forwarding origin target dependencies to the corresponding <ORIGIN>_autogen target.",
	"assets/variables.json.AUTOGEN_PARALLEL": "Number of parallel moc or uic processes to start when using AUTOMOC and AUTOUIC.",
	"assets/variables.json.AUTOGEN_TARGET_DEPENDS": "Additional target dependencies of the corresponding <ORIGIN>_autogen target.",
	"assets/variables.json.AUTOGEN_USE_SYSTEM_INCLUDE": "AUTOGEN_USE_SYSTEM_INCLUDE is a boolean property that can be set on a target to indicate that the autogen target include directory should be added as a system include directory or normal include directory to the target.",
	"assets/variables.json.AUTOMOC": "Should the target be processed with auto-moc (for Qt projects).",
	"assets/variables.json.AUTOMOC_COMPILER_PREDEFINES": "Boolean value used by AUTOMOC to determine if the compiler pre definitions file moc_predefs.h should be generated.",
	"assets/variables.json.AUTOMOC_DEPEND_FILTERS": "Filter definitions used by AUTOMOC to extract file names from a source file that are registered as additional dependencies for the moc file of the source file.",
	"assets/variables.json.AUTOMOC_EXECUTABLE": "AUTOMOC_EXECUTABLE is file path pointing to the moc executable to use for AUTOMOC enabled files. Setting this property will make CMake skip the automatic detection of the moc binary as well as the sanity-tests normally run to ensure that the binary is available and working as expected.",
	"assets/variables.json.AUTOMOC_MACRO_NAMES": "A semicolon-separated list  of macro names used by AUTOMOC to determine if a C++ file needs to be processed by moc.",
	"assets/variables.json.AUTOMOC_MOC_OPTIONS": "Additional options for moc when using AUTOMOC",
	"assets/variables.json.AUTOMOC_PATH_PREFIX": "When this property is ON, CMake will generate the -p path prefix option for moc on AUTOMOC enabled Qt targets.",
	"assets/variables.json.AUTORCC": "Should the target be processed with auto-rcc (for Qt projects).",
	"assets/variables.json.AUTORCC_EXECUTABLE": "AUTORCC_EXECUTABLE is file path pointing to the rcc executable to use for AUTORCC enabled files. Setting this property will make CMake skip the automatic detection of the rcc binary as well as the sanity-tests normally run to ensure that the binary is available and working as expected.",
	"assets/variables.json.AUTOUIC": "Should the target be processed with auto-uic (for Qt projects).",
	"assets/variables.json.AUTOUIC_EXECUTABLE": "AUTOUIC_EXECUTABLE is file path pointing to the uic executable to use for AUTOUIC enabled files. Setting this property will make CMake skip the automatic detection of the uic binary as well as the sanity-tests normally run to ensure that the binary is available and working as expected.",
	"assets/variables.json.AUTOUIC_SEARCH_PATHS": "Search path list used by AUTOUIC to find included .ui files.",
	"assets/variables.json.BUILD_RPATH": "A semicolon-separated list  specifying runtime path (RPATH) entries to add to binaries linked in the build tree (for platforms that support it). By default, CMake sets the runtime path of binaries in the build tree to contain search paths it knows are needed to find the shared libraries they link. Projects may set BUILD_RPATH to specify additional search paths.",
	"assets/variables.json.BUILD_RPATH_USE_ORIGIN": "Whether to use relative paths for the build RPATH.",
	"assets/variables.json.BUILD_WITH_INSTALL_NAME_DIR": "BUILD_WITH_INSTALL_NAME_DIR is a boolean specifying whether the macOS install_name of a target in the build tree uses the directory given by INSTALL_NAME_DIR. This setting only applies to targets on macOS.",
	"assets/variables.json.BUILD_WITH_INSTALL_RPATH": "BUILD_WITH_INSTALL_RPATH is a boolean specifying whether to link the target in the build tree with the INSTALL_RPATH. This takes precedence over SKIP_BUILD_RPATH and avoids the need for relinking before installation.",
	"assets/variables.json.BUNDLE": "This target is a CFBundle on the macOS.",
	"assets/variables.json.BUNDLE_EXTENSION": "The file extension used to name a BUNDLE, a FRAMEWORK, or a MACOSX_BUNDLE target on the macOS and iOS.",
	"assets/variables.json.COMMON_LANGUAGE_RUNTIME": "By setting this target property, the target is configured to build with C++/CLI support.",
	"assets/variables.json.COMPATIBLE_INTERFACE_BOOL": "Properties which must be compatible with their link interface",
	"assets/variables.json.COMPATIBLE_INTERFACE_NUMBER_MAX": "Properties whose maximum value from the link interface will be used.",
	"assets/variables.json.COMPATIBLE_INTERFACE_NUMBER_MIN": "Properties whose minimum value from the link interface will be used.",
	"assets/variables.json.COMPATIBLE_INTERFACE_STRING": "Properties which must be string-compatible with their link interface",
	"assets/variables.json.COMPILE_FEATURES": "Compiler features enabled for this target.",
	"assets/variables.json.COMPILE_PDB_NAME": "Output name for the MS debug symbol .pdb file generated by the compiler while building source files.",
	"assets/variables.json.COMPILE_PDB_NAME_CONFIG": "Per-configuration output name for the MS debug symbol .pdb file generated by the compiler while building source files.",
	"assets/variables.json.COMPILE_PDB_OUTPUT_DIRECTORY": "Output directory for the MS debug symbol .pdb file generated by the compiler while building source files.",
	"assets/variables.json.COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG": "Per-configuration output directory for the MS debug symbol .pdb file generated by the compiler while building source files.",
	"assets/variables.json.COMPILE_WARNING_AS_ERROR": "Specify whether to treat warnings on compile as errors. If enabled, adds a flag to treat warnings on compile as errors. If the cmake --compile-no-warning-as-error option is given on the cmake command line, this property is ignored.",
	"assets/variables.json.CONFIG_OUTPUT_NAME": "Old per-configuration target file base name. Use OUTPUT_NAME_ instead.",
	"assets/variables.json.CONFIG_POSTFIX": "Postfix to append to the target file name for configuration <CONFIG>.",
	"assets/variables.json.CROSSCOMPILING_EMULATOR": "Use the given emulator to run executables created when crosscompiling. This command will be added as a prefix to add_test, add_custom_command, and add_custom_target commands for built target system executables.",
	"assets/variables.json.CUDA_ARCHITECTURES": "List of architectures to generate device code for.",
	"assets/variables.json.CUDA_CUBIN_COMPILATION": "Compile CUDA sources to .cubin files instead of .obj files within Object Libraries.",
	"assets/variables.json.CUDA_EXTENSIONS": "Boolean specifying whether compiler specific extensions are requested.",
	"assets/variables.json.CUDA_FATBIN_COMPILATION": "Compile CUDA sources to .fatbin files instead of .obj files within Object Libraries.",
	"assets/variables.json.CUDA_OPTIX_COMPILATION": "Compile CUDA sources to .optixir files instead of .obj files within Object Libraries.",
	"assets/variables.json.CUDA_PTX_COMPILATION": "Compile CUDA sources to .ptx files instead of .obj files within Object Libraries.",
	"assets/variables.json.CUDA_RESOLVE_DEVICE_SYMBOLS": "CUDA only: Enables device linking for the specific library target where required.",
	"assets/variables.json.CUDA_RUNTIME_LIBRARY": "Select the CUDA runtime library for use by compilers targeting the CUDA language.",
	"assets/variables.json.CUDA_SEPARABLE_COMPILATION": "CUDA only: Enables separate compilation of device code",
	"assets/variables.json.CUDA_STANDARD": "The CUDA/C++ standard whose features are requested to build this target.",
	"assets/variables.json.CUDA_STANDARD_REQUIRED": "Boolean describing whether the value of CUDA_STANDARD is a requirement.",
	"assets/variables.json.CXX_EXTENSIONS": "Boolean specifying whether compiler specific extensions are requested.",
	"assets/variables.json.CXX_MODULE_DIRS": "Semicolon-separated list of base directories of the target's default C++ module set (i.e. the file set with name and type CXX_MODULES). The property supports generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.CXX_MODULE_DIRS_NAME": "Semicolon-separated list of base directories of the target's <NAME> C++ module set, which has the set type CXX_MODULES. The property supports generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.CXX_MODULE_SET": "Semicolon-separated list of files in the target's default C++ module set, (i.e. the file set with name and type CXX_MODULES). If any of the paths are relative, they are computed relative to the target's source directory. The property supports generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.CXX_MODULE_SETS": "Read-only list of the target's PRIVATE and PUBLIC C++ module sets (i.e. all file sets with the type CXX_MODULES). Files listed in these file sets are treated as source files for the purpose of IDE integration.",
	"assets/variables.json.CXX_MODULE_SET_NAME": "Semicolon-separated list of files in the target's <NAME> C++ module set, which has the set type CXX_MODULES. If any of the paths are relative, they are computed relative to the target's source directory. The property supports generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.CXX_MODULE_STD": "CXX_MODULE_STD is a boolean specifying whether the target may use import std; its C++ sources or not.",
	"assets/variables.json.CXX_STANDARD": "The C++ standard whose features are requested to build this target.",
	"assets/variables.json.CXX_STANDARD_REQUIRED": "Boolean describing whether the value of CXX_STANDARD is a requirement.",
	"assets/variables.json.C_EXTENSIONS": "Boolean specifying whether compiler specific extensions are requested.",
	"assets/variables.json.C_STANDARD": "The C standard whose features are requested to build this target.",
	"assets/variables.json.C_STANDARD_REQUIRED": "Boolean describing whether the value of C_STANDARD is a requirement.",
	"assets/variables.json.DEBUG_POSTFIX": "See target property <CONFIG>_POSTFIX.",
	"assets/variables.json.DEFINE_SYMBOL": "Define a symbol when compiling this target's sources.",
	"assets/variables.json.DEPLOYMENT_ADDITIONAL_FILES": "Set the WinCE project AdditionalFiles in DeploymentTool in .vcproj files generated by the Visual Studio Generators. This is useful when you want to debug on remote WinCE device. Specify additional files that will be copied to the device. For example:",
	"assets/variables.json.DEPLOYMENT_REMOTE_DIRECTORY": "Set the WinCE project RemoteDirectory in DeploymentTool and RemoteExecutable in DebuggerTool in .vcproj files generated by the Visual Studio Generators. This is useful when you want to debug on remote WinCE device. For example:",
	"assets/variables.json.DEPRECATION": "Deprecation message from imported target's developer.",
	"assets/variables.json.DISABLE_PRECOMPILE_HEADERS": "Disables the precompilation of header files specified by PRECOMPILE_HEADERS property.",
	"assets/variables.json.DLL_NAME_WITH_SOVERSION": "This property controls whether the SOVERSION target property is added to the filename of generated DLL filenames for the Windows platform, which is selected when the WIN32 variable is set.",
	"assets/variables.json.DOTNET_SDK": "Specify the .NET SDK for C# projects. For example: Microsoft.NET.Sdk.",
	"assets/variables.json.DOTNET_TARGET_FRAMEWORK": "Specify the .NET target framework.",
	"assets/variables.json.DOTNET_TARGET_FRAMEWORK_VERSION": "Specify the .NET target framework version.",
	"assets/variables.json.EchoString": "A message to be displayed when the target is built.",
	"assets/variables.json.ENABLE_EXPORTS": "Specify whether an executable or a shared library exports symbols.",
	"assets/variables.json.EXCLUDE_FROM_DEFAULT_BUILD": "Exclude target from Build Solution.",
	"assets/variables.json.EXCLUDE_FROM_DEFAULT_BUILD_CONFIG": "Per-configuration version of target exclusion from Build Solution.",
	"assets/variables.json.EXPORT_COMPILE_COMMANDS": "Enable/Disable output of compile commands during generation for a target.",
	"assets/variables.json.EXPORT_FIND_PACKAGE_NAME": "Control the package name associated with a dependency target when exporting a find_dependency call in install or export. This can be used to assign a package name to a package that is built by CMake and exported, or to override the package in the find_package call that created the target.",
	"assets/variables.json.EXPORT_NAME": "Exported name for target files.",
	"assets/variables.json.EXPORT_NO_SYSTEM": "This property affects the behavior of the install and export commands when they install or export the target respectively. When EXPORT_NO_SYSTEM is set to true, those commands generate an imported target with SYSTEM property set to false.",
	"assets/variables.json.EXPORT_PROPERTIES": "List additional properties to export for a target.",
	"assets/variables.json.FOLDER": "For IDEs that present targets using a folder hierarchy, this property specifies the name of the folder to place the target under. To nest folders, use FOLDER values such as GUI/Dialogs with / characters separating folder levels. Targets with no FOLDER property will appear as top level entities. Targets with the same FOLDER property value will appear in the same folder as siblings.",
	"assets/variables.json.Fortran_BUILDING_INSTRINSIC_MODULES": "Instructs the CMake Fortran preprocessor that the target is building Fortran intrinsics for building a Fortran compiler.",
	"assets/variables.json.Fortran_MODULE_DIRECTORY": "Specify output directory for Fortran modules provided by the target.",
	"assets/variables.json.FRAMEWORK": "Build SHARED or STATIC library as Framework Bundle on the macOS and iOS.",
	"assets/variables.json.FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG": "Postfix to append to the framework file name for configuration <CONFIG>, when using a multi-config generator (like Xcode and Ninja Multi-Config).",
	"assets/variables.json.FRAMEWORK_VERSION": "Version of a framework created using the FRAMEWORK target property (e.g. A).",
	"assets/variables.json.GENERATOR_FILE_NAME": "Generator's file for this target.",
	"assets/variables.json.GHS_INTEGRITY_APP": "ON / OFF boolean to determine if an executable target should be treated as an Integrity Application.",
	"assets/variables.json.GHS_NO_SOURCE_GROUP_FILE": "ON / OFF boolean to control if the project file for a target should be one single file or multiple files.",
	"assets/variables.json.GNUtoMS": "Convert GNU import library (.dll.a) to MS format (.lib).",
	"assets/variables.json.HAS_CXX": "Link the target using the C++ linker tool (obsolete).",
	"assets/variables.json.HEADER_DIRS": "Semicolon-separated list of base directories of the target's default header set (i.e. the file set with name and type HEADERS). The property supports generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.HEADER_DIRS_NAME": "Semicolon-separated list of base directories of the target's <NAME> header set, which has the set type HEADERS. The property supports generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.HEADER_SET": "Semicolon-separated list of files in the target's default header set, (i.e. the file set with name and type HEADERS). If any of the paths are relative, they are computed relative to the target's source directory. The property supports generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.HEADER_SETS": "Read-only list of the target's PRIVATE and PUBLIC header sets (i.e. all file sets with the type HEADERS). Files listed in these file sets are treated as source files for the purpose of IDE integration. The files also have their HEADER_FILE_ONLY property set to TRUE.",
	"assets/variables.json.HEADER_SET_NAME": "Semicolon-separated list of files in the target's <NAME> header set, which has the set type HEADERS. If any of the paths are relative, they are computed relative to the target's source directory. The property supports generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.HIP_ARCHITECTURES": "List of GPU architectures to for which to generate device code. Architecture names are interpreted based on CMAKE_HIP_PLATFORM.",
	"assets/variables.json.HIP_EXTENSIONS": "Boolean specifying whether compiler specific extensions are requested.",
	"assets/variables.json.HIP_STANDARD": "The HIP/C++ standard requested to build this target.",
	"assets/variables.json.HIP_STANDARD_REQUIRED": "Boolean describing whether the value of HIP_STANDARD is a requirement.",
	"assets/variables.json.IMPORTED": "Read-only indication of whether a target is IMPORTED.",
	"assets/variables.json.IMPORTED_COMMON_LANGUAGE_RUNTIME": "Property to define if the target uses C++/CLI.",
	"assets/variables.json.IMPORTED_CONFIGURATIONS": "Configurations provided for an imported target .",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS": "Preprocessor definitions for compiling an IMPORTED target's C++ module sources.",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_FEATURES": "Compiler features enabled for this IMPORTED target's C++ modules.",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_OPTIONS": "List of options to pass to the compiler for this IMPORTED target's C++ modules.",
	"assets/variables.json.IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES": "List of preprocessor include file search directories when compiling C++ modules for IMPORTED targets.",
	"assets/variables.json.IMPORTED_CXX_MODULES_LINK_LIBRARIES": "List of direct dependencies to use for usage requirements for C++ modules in the target's C++ modules.",
	"assets/variables.json.IMPORTED_GLOBAL": "Indication of whether an IMPORTED target  is globally visible.",
	"assets/variables.json.IMPORTED_IMPLIB": "Full path to the import library for an IMPORTED target.",
	"assets/variables.json.IMPORTED_IMPLIB_CONFIG": "<CONFIG>-specific version of IMPORTED_IMPLIB property.",
	"assets/variables.json.IMPORTED_LIBNAME": "Specify the link library name for an imported  Interface Library .",
	"assets/variables.json.IMPORTED_LIBNAME_CONFIG": "<CONFIG>-specific version of IMPORTED_LIBNAME property.",
	"assets/variables.json.IMPORTED_LINK_DEPENDENT_LIBRARIES": "Dependent shared libraries of an imported shared library.",
	"assets/variables.json.IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG": "<CONFIG>-specific version of IMPORTED_LINK_DEPENDENT_LIBRARIES.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LANGUAGES": "Languages compiled into an IMPORTED static library.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG": "<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LANGUAGES.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LIBRARIES": "Transitive link interface of an IMPORTED target.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG": "<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LIBRARIES.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_MULTIPLICITY": "Repetition count for cycles of IMPORTED static libraries.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG": "<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_MULTIPLICITY.",
	"assets/variables.json.IMPORTED_LOCATION": "Full path to the main file on disk for an IMPORTED target.",
	"assets/variables.json.IMPORTED_LOCATION_CONFIG": "<CONFIG>-specific version of IMPORTED_LOCATION property.",
	"assets/variables.json.IMPORTED_NO_SONAME": "Specifies that an IMPORTED shared library target has no soname.",
	"assets/variables.json.IMPORTED_NO_SONAME_CONFIG": "<CONFIG>-specific version of IMPORTED_NO_SONAME property.",
	"assets/variables.json.IMPORTED_NO_SYSTEM": "Setting IMPORTED_NO_SYSTEM to true on an imported target  specifies that it is not a system target. This has the following effects:",
	"assets/variables.json.IMPORTED_OBJECTS": "A semicolon-separated list  of absolute paths to the object files on disk for an imported  object library .",
	"assets/variables.json.IMPORTED_OBJECTS_CONFIG": "<CONFIG>-specific version of IMPORTED_OBJECTS property.",
	"assets/variables.json.IMPORTED_SONAME": "The soname of an IMPORTED target of shared library type.",
	"assets/variables.json.IMPORTED_SONAME_CONFIG": "<CONFIG>-specific version of IMPORTED_SONAME property.",
	"assets/variables.json.IMPORT_PREFIX": "What comes before the import library name.",
	"assets/variables.json.IMPORT_SUFFIX": "What comes after the import library name.",
	"assets/variables.json.INSTALL_NAME_DIR": "Directory name for installed targets on Apple platforms.",
	"assets/variables.json.INSTALL_REMOVE_ENVIRONMENT_RPATH": "Controls whether toolchain-defined rpaths should be removed during installation.",
	"assets/variables.json.INSTALL_RPATH": "The rpath to use for installed targets.",
	"assets/variables.json.INSTALL_RPATH_USE_LINK_PATH": "Add paths to linker search and installed rpath.",
	"assets/variables.json.INTERFACE_AUTOMOC_MACRO_NAMES": "A semicolon-separated list  of macro names for AUTOMOC to be propagated to consumers.",
	"assets/variables.json.INTERFACE_AUTOUIC_OPTIONS": "List of interface options to pass to uic.",
	"assets/variables.json.INTERFACE_COMPILE_DEFINITIONS": "List of public property_name requirements for a library.",
	"assets/variables.json.INTERFACE_COMPILE_FEATURES": "List of public property_name requirements for a library.",
	"assets/variables.json.INTERFACE_COMPILE_OPTIONS": "List of public property_name requirements for a library.",
	"assets/variables.json.INTERFACE_CXX_MODULE_SETS": "Read-only list of the target's PUBLIC C++ module sets (i.e. all file sets with the type CXX_MODULES). Files listed in these C++ module sets can be installed with install and exported with install and export.",
	"assets/variables.json.INTERFACE_HEADER_SETS": "Read-only list of the target's INTERFACE and PUBLIC header sets (i.e. all file sets with the type HEADERS). Files listed in these header sets can be installed with install and exported with install and export.",
	"assets/variables.json.INTERFACE_HEADER_SETS_TO_VERIFY": "Used to specify which PUBLIC and INTERFACE header sets of a target should be verified.",
	"assets/variables.json.INTERFACE_INCLUDE_DIRECTORIES": "List of public property_name requirements for a library.",
	"assets/variables.json.INTERFACE_LINK_DEPENDS": "Additional public interface files on which a target binary depends for linking.",
	"assets/variables.json.INTERFACE_LINK_DIRECTORIES": "List of public property_name requirements for a library.",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES": "List public interface libraries for a library.",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES_DIRECT": "List of libraries that consumers of this library should treat as direct link dependencies.",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE": "List of libraries that consumers of this library should not treat as direct link dependencies.",
	"assets/variables.json.INTERFACE_LINK_OPTIONS": "List of public property_name requirements for a library.",
	"assets/variables.json.INTERFACE_POSITION_INDEPENDENT_CODE": "Whether consumers need to create a position-independent target",
	"assets/variables.json.INTERFACE_PRECOMPILE_HEADERS": "List of interface header files to precompile into consuming targets.",
	"assets/variables.json.INTERFACE_SOURCES": "List of interface sources to compile into consuming targets.",
	"assets/variables.json.INTERFACE_SYSTEM_INCLUDE_DIRECTORIES": "List of public system include directories for a library.",
	"assets/variables.json.IOS_INSTALL_COMBINED": "Build a combined (device and simulator) target when installing.",
	"assets/variables.json.ISPC_HEADER_DIRECTORY": "Specify relative output directory for ISPC headers provided by the target.",
	"assets/variables.json.ISPC_HEADER_SUFFIX": "Specify output suffix to be used for ISPC generated headers provided by the target.",
	"assets/variables.json.ISPC_INSTRUCTION_SETS": "List of instruction set architectures to generate code for.",
	"assets/variables.json.JOB_POOL_COMPILE": "Ninja only: Pool used for compiling.",
	"assets/variables.json.JOB_POOL_LINK": "Ninja only: Pool used for linking.",
	"assets/variables.json.JOB_POOL_PRECOMPILE_HEADER": "Ninja only: Pool used for generating pre-compiled headers.",
	"assets/variables.json.LANG_CLANG_TIDY": "This property is implemented only when <LANG> is C, CXX, OBJC or OBJCXX.",
	"assets/variables.json.LANG_CLANG_TIDY_EXPORT_FIXES_DIR": "This property is implemented only when <LANG> is C, CXX, OBJC or OBJCXX, and only has an effect when <LANG>_CLANG_TIDY is set.",
	"assets/variables.json.LANG_COMPILER_LAUNCHER": "This property is implemented only when <LANG> is C, CXX, Fortran, HIP, ISPC, OBJC, OBJCXX, or CUDA.",
	"assets/variables.json.LANG_CPPCHECK": "This property is supported only when <LANG> is C or CXX.",
	"assets/variables.json.LANG_CPPLINT": "This property is supported only when <LANG> is C or CXX.",
	"assets/variables.json.LANG_EXTENSIONS": "The variations are:",
	"assets/variables.json.LANG_INCLUDE_WHAT_YOU_USE": "This property is implemented only when <LANG> is C or CXX.",
	"assets/variables.json.LANG_LINKER_LAUNCHER": "This property is implemented only when <LANG> is C, CXX, OBJC, or OBJCXX",
	"assets/variables.json.LANG_STANDARD": "The variations are:",
	"assets/variables.json.LANG_STANDARD_REQUIRED": "The variations are:",
	"assets/variables.json.LANG_VISIBILITY_PRESET": "Value for symbol visibility compile flags",
	"assets/variables.json.LIBRARY_OUTPUT_DIRECTORY": "Output directory in which to build XXX target files.",
	"assets/variables.json.LIBRARY_OUTPUT_DIRECTORY_CONFIG": "Per-configuration output directory for LIBRARY  target files.",
	"assets/variables.json.LIBRARY_OUTPUT_NAME": "Output name for XXX target files.",
	"assets/variables.json.LIBRARY_OUTPUT_NAME_CONFIG": "Per-configuration output name for LIBRARY  target files.",
	"assets/variables.json.LINKER_LANGUAGE": "Specifies language whose compiler will invoke the linker.",
	"assets/variables.json.LINKER_TYPE": "Specify which linker will be used for the link step. The property value may use generator expressions <cmake-generator-expressions(7)>.",
	"assets/variables.json.LINK_DEPENDS": "Additional files on which a target binary depends for linking.",
	"assets/variables.json.LINK_DEPENDS_NO_SHARED": "Do not depend on linked shared library files.",
	"assets/variables.json.LINK_FLAGS": "Additional flags to use when linking this target if it is a shared library, module library, or an executable. Static libraries need to use STATIC_LIBRARY_OPTIONS or STATIC_LIBRARY_FLAGS properties.",
	"assets/variables.json.LINK_FLAGS_CONFIG": "Per-configuration linker flags for a SHARED library, MODULE or EXECUTABLE target.",
	"assets/variables.json.LINK_INTERFACE_LIBRARIES": "List public interface libraries for a shared library or executable.",
	"assets/variables.json.LINK_INTERFACE_LIBRARIES_CONFIG": "Per-configuration list of public interface libraries for a target.",
	"assets/variables.json.LINK_INTERFACE_MULTIPLICITY": "Repetition count for STATIC libraries with cyclic dependencies.",
	"assets/variables.json.LINK_INTERFACE_MULTIPLICITY_CONFIG": "Per-configuration repetition count for cycles of STATIC libraries.",
	"assets/variables.json.LINK_LIBRARIES": "List of direct link dependencies.",
	"assets/variables.json.LINK_LIBRARIES_ONLY_TARGETS": "Enforce that link items that can be target names are actually existing targets.",
	"assets/variables.json.LINK_LIBRARY_OVERRIDE": "Override the library features associated with libraries from LINK_LIBRARY generator expressions. This can be used to resolve incompatible library features that result from specifying different features for the same library in different LINK_LIBRARY generator expressions.",
	"assets/variables.json.LINK_LIBRARY_OVERRIDE_LIBRARY": "Override the library feature associated with <LIBRARY> from LINK_LIBRARY generator expressions. This can be used to resolve incompatible library features that result from specifying different features for <LIBRARY> in different LINK_LIBRARY generator expressions.",
	"assets/variables.json.LINK_SEARCH_END_STATIC": "End a link line such that static system libraries are used.",
	"assets/variables.json.LINK_SEARCH_START_STATIC": "Assume the linker looks for static libraries by default.",
	"assets/variables.json.LINK_WHAT_YOU_USE": "This is a boolean option that, when set to TRUE, will automatically run contents of variable CMAKE_LINK_WHAT_YOU_USE_CHECK on the target after it is linked. In addition, the linker flag specified by variable CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG will be passed to the target with the link command so that all libraries specified on the command line will be linked into the target. This will result in the link producing a list of libraries that provide no symbols used by this target but are being linked to it.",
	"assets/variables.json.LOCATION_CONFIG": "Read-only property providing a target location on disk.",
	"assets/variables.json.MACHO_COMPATIBILITY_VERSION": "What compatibility version number is this target for Mach-O binaries.",
	"assets/variables.json.MACHO_CURRENT_VERSION": "What current version number is this target for Mach-O binaries.",
	"assets/variables.json.MACOSX_BUNDLE": "Build an executable as an Application Bundle on macOS or iOS.",
	"assets/variables.json.MACOSX_BUNDLE_INFO_PLIST": "Specify a custom Info.plist template for a macOS and iOS Application Bundle.",
	"assets/variables.json.MACOSX_FRAMEWORK_INFO_PLIST": "Specify a custom Info.plist template for a macOS and iOS Framework.",
	"assets/variables.json.MACOSX_RPATH": "Whether this target on macOS or iOS is located at runtime using rpaths.",
	"assets/variables.json.MANUALLY_ADDED_DEPENDENCIES": "Get manually added dependencies to other top-level targets.",
	"assets/variables.json.MAP_IMPORTED_CONFIG_CONFIG": "Map from project configuration to imported target 's configuration.",
	"assets/variables.json.MSVC_DEBUG_INFORMATION_FORMAT": "Select debug information format when targeting the MSVC ABI.",
	"assets/variables.json.MSVC_RUNTIME_LIBRARY": "Select the MSVC runtime library for use by compilers targeting the MSVC ABI.",
	"assets/variables.json.NAME": "Logical name for the target.",
	"assets/variables.json.NO_SONAME": "Whether to set soname when linking a shared library.",
	"assets/variables.json.NO_SYSTEM_FROM_IMPORTED": "Do not treat include directories from the interfaces of consumed imported targets as system directories.",
	"assets/variables.json.OBJCXX_EXTENSIONS": "Boolean specifying whether compiler specific extensions are requested.",
	"assets/variables.json.OBJCXX_STANDARD": "The ObjC++ standard whose features are requested to build this target.",
	"assets/variables.json.OBJCXX_STANDARD_REQUIRED": "Boolean describing whether the value of OBJCXX_STANDARD is a requirement.",
	"assets/variables.json.OBJC_EXTENSIONS": "Boolean specifying whether compiler specific extensions are requested.",
	"assets/variables.json.OBJC_STANDARD": "The OBJC standard whose features are requested to build this target.",
	"assets/variables.json.OBJC_STANDARD_REQUIRED": "Boolean describing whether the value of OBJC_STANDARD is a requirement.",
	"assets/variables.json.OPTIMIZE_DEPENDENCIES": "Activates dependency optimization of static and object libraries.",
	"assets/variables.json.OSX_ARCHITECTURES": "Target specific architectures for macOS.",
	"assets/variables.json.OSX_ARCHITECTURES_CONFIG": "Per-configuration macOS and iOS binary architectures for a target.",
	"assets/variables.json.OUTPUT_NAME": "Output name for target files.",
	"assets/variables.json.OUTPUT_NAME_CONFIG": "Per-configuration target file base name.",
	"assets/variables.json.PCH_INSTANTIATE_TEMPLATES": "When this property is set to true, the precompiled header compiler options will contain a flag to instantiate templates during the generation of the PCH if supported. This can significantly improve compile times. Supported in Clang since version 11.",
	"assets/variables.json.PCH_WARN_INVALID": "When this property is set to true, the precompile header compiler options will contain a compiler flag which should warn about invalid precompiled headers e.g. -Winvalid-pch for GNU compiler.",
	"assets/variables.json.PDB_NAME": "Output name for the MS debug symbol .pdb file generated by the linker for an executable or shared library target.",
	"assets/variables.json.PDB_NAME_CONFIG": "Per-configuration output name for the MS debug symbol .pdb file generated by the linker for an executable or shared library target.",
	"assets/variables.json.PDB_OUTPUT_DIRECTORY": "Output directory for the MS debug symbols .pdb file generated by the linker for an executable or shared library target.",
	"assets/variables.json.PDB_OUTPUT_DIRECTORY_CONFIG": "Per-configuration output directory for the MS debug symbol .pdb file generated by the linker for an executable or shared library target.",
	"assets/variables.json.POSITION_INDEPENDENT_CODE": "Whether to create a position-independent target",
	"assets/variables.json.POST_INSTALL_SCRIPT": "Deprecated install support.",
	"assets/variables.json.PRECOMPILE_HEADERS": "List of header files to precompile.",
	"assets/variables.json.PRECOMPILE_HEADERS_REUSE_FROM": "Target from which to reuse the precompiled headers build artifact.",
	"assets/variables.json.PREFIX": "What comes before the library name.",
	"assets/variables.json.PRE_INSTALL_SCRIPT": "Deprecated install support.",
	"assets/variables.json.PRIVATE_HEADER": "Specify private header files in a FRAMEWORK shared library target.",
	"assets/variables.json.PROJECT_LABEL": "Change the name of a target in an IDE.",
	"assets/variables.json.PUBLIC_HEADER": "Specify public header files in a FRAMEWORK shared library target.",
	"assets/variables.json.RESOURCE": "Specify resource files in a FRAMEWORK or BUNDLE.",
	"assets/variables.json.RUNTIME_OUTPUT_DIRECTORY": "Output directory in which to build XXX target files.",
	"assets/variables.json.RUNTIME_OUTPUT_DIRECTORY_CONFIG": "Per-configuration output directory for RUNTIME  target files.",
	"assets/variables.json.RUNTIME_OUTPUT_NAME": "Output name for XXX target files.",
	"assets/variables.json.RUNTIME_OUTPUT_NAME_CONFIG": "Per-configuration output name for RUNTIME  target files.",
	"assets/variables.json.SKIP_BUILD_RPATH": "Should rpaths be used for the build tree.",
	"assets/variables.json.SOURCES": "This specifies the list of paths to source files for the target. The following commands all set or add to the SOURCES target property and are the usual way to manipulate it:",
	"assets/variables.json.SOVERSION": "ABI version number of a shared library target.",
	"assets/variables.json.STATIC_LIBRARY_FLAGS": "Archiver (or MSVC librarian) flags for a static library target. Targets that are shared libraries, modules, or executables need to use the LINK_OPTIONS or LINK_FLAGS target properties.",
	"assets/variables.json.STATIC_LIBRARY_FLAGS_CONFIG": "Per-configuration archiver (or MSVC librarian) flags for a static library target.",
	"assets/variables.json.STATIC_LIBRARY_OPTIONS": "Archiver (or MSVC librarian) flags for a static library target. Targets that are shared libraries, modules, or executables need to use the LINK_OPTIONS target property.",
	"assets/variables.json.SUFFIX": "What comes after the target name.",
	"assets/variables.json.Swift_COMPILATION_MODE": "Specify how Swift compiles a target.",
	"assets/variables.json.Swift_LANGUAGE_VERSION": "This property sets the language version for the Swift sources in the target. If one is not specified, it will default to CMAKE_Swift_LANGUAGE_VERSION if specified, otherwise it is the latest version supported by the compiler.",
	"assets/variables.json.Swift_MODULE_DIRECTORY": "Specify output directory for Swift modules provided by the target.",
	"assets/variables.json.Swift_MODULE_NAME": "This property specifies the name of the Swift module. It is defaulted to the name of the target.",
	"assets/variables.json.TEST_LAUNCHER": "Use the given launcher to run executables. This command will be added as a prefix to add_test commands for build target system executables and is meant to be run on the host machine.",
	"assets/variables.json.TRANSITIVE_COMPILE_PROPERTIES": "Properties that the TARGET_PROPERTY generator expression, on the target and its dependents, evaluates as the union of values collected from the transitive closure of link dependencies, excluding entries guarded by LINK_ONLY.",
	"assets/variables.json.TRANSITIVE_LINK_PROPERTIES": "Properties that the TARGET_PROPERTY generator expression, on the target and its dependents, evaluates as the union of values collected from the transitive closure of link dependencies, including entries guarded by LINK_ONLY.",
	"assets/variables.json.UNITY_BUILD": "When this property is set to true, the target source files will be combined into batches for faster compilation. This is done by creating a (set of) unity sources which #include the original sources, then compiling these unity sources instead of the originals. This is known as a Unity or Jumbo build.",
	"assets/variables.json.UNITY_BUILD_BATCH_SIZE": "Specifies the maximum number of source files that can be combined into any one unity source file when unity builds are enabled by the UNITY_BUILD target property. The original source files will be distributed across as many unity source files as necessary to honor this limit.",
	"assets/variables.json.UNITY_BUILD_CODE_AFTER_INCLUDE": "Code snippet which is included verbatim by the UNITY_BUILD feature just after every #include statement in the generated unity source files. For example:",
	"assets/variables.json.UNITY_BUILD_CODE_BEFORE_INCLUDE": "Code snippet which is included verbatim by the UNITY_BUILD feature just before every #include statement in the generated unity source files. For example:",
	"assets/variables.json.UNITY_BUILD_MODE": "CMake provides different algorithms for selecting which sources are grouped together into a bucket. Selection is decided by this property, which has the following acceptable values:",
	"assets/variables.json.UNITY_BUILD_UNIQUE_ID": "The name of a valid C-identifier which is set to a unique per-file value during unity builds.",
	"assets/variables.json.VERIFY_INTERFACE_HEADER_SETS": "Used to verify that all headers in a target's PUBLIC and INTERFACE header sets can be included on their own.",
	"assets/variables.json.VERSION": "Version number of a shared library target.",
	"assets/variables.json.VISIBILITY_INLINES_HIDDEN": "Whether to add a compile flag to hide symbols of inline functions",
	"assets/variables.json.VS_CONFIGURATION_TYPE": "Visual Studio project configuration type.",
	"assets/variables.json.VS_DEBUGGER_COMMAND": "Sets the local debugger command for Visual Studio C++ targets. The property value may use generator expressions <cmake-generator-expressions(7)>. This is defined in <LocalDebuggerCommand> in the Visual Studio project file. This property is initialized by the value of the variable CMAKE_VS_DEBUGGER_COMMAND if it is set when a target is created.",
	"assets/variables.json.VS_DEBUGGER_COMMAND_ARGUMENTS": "Sets the local debugger command line arguments for Visual Studio C++ targets. The property value may use generator expressions <cmake-generator-expressions(7)>. This is defined in <LocalDebuggerCommandArguments> in the Visual Studio project file. This property is initialized by the value of the variable CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS if it is set when a target is created.",
	"assets/variables.json.VS_DEBUGGER_ENVIRONMENT": "Sets the local debugger environment for Visual Studio C++ targets. The property value may use generator expressions <cmake-generator-expressions(7)>. This is defined in <LocalDebuggerEnvironment> in the Visual Studio project file. This property is initialized by the value of the variable CMAKE_VS_DEBUGGER_ENVIRONMENT if it is set when a target is created.",
	"assets/variables.json.VS_DEBUGGER_WORKING_DIRECTORY": "Sets the local debugger working directory for Visual Studio C++ targets. The property value may use generator expressions <cmake-generator-expressions(7)>. This is defined in <LocalDebuggerWorkingDirectory> in the Visual Studio project file. This property is initialized by the value of the variable CMAKE_VS_DEBUGGER_WORKING_DIRECTORY if it is set when a target is created.",
	"assets/variables.json.VS_DESKTOP_EXTENSIONS_VERSION": "Visual Studio Windows 10 Desktop Extensions Version",
	"assets/variables.json.VS_DOTNET_DOCUMENTATION_FILE": "Visual Studio managed project .NET documentation output",
	"assets/variables.json.VS_DOTNET_REFERENCEPROP_refname_TAG_tagname": "Defines an XML property <tagname> for a .NET reference <refname>.",
	"assets/variables.json.VS_DOTNET_REFERENCES": "Visual Studio managed project .NET references",
	"assets/variables.json.VS_DOTNET_REFERENCES_COPY_LOCAL": "Sets the Copy Local property for all .NET hint references in the target",
	"assets/variables.json.VS_DOTNET_REFERENCE_refname": "Visual Studio managed project .NET reference with name <refname> and hint path.",
	"assets/variables.json.VS_DOTNET_STARTUP_OBJECT": "Sets the startup object property in Visual Studio .NET targets. The property value defines a full qualified class name (including package name), for example: MyCompany.Package.MyStarterClass.",
	"assets/variables.json.VS_DOTNET_TARGET_FRAMEWORK_VERSION": "Specify the .NET target framework version.",
	"assets/variables.json.VS_DPI_AWARE": "Set the Manifest Tool -> Input and Output -> DPI Awareness in the Visual Studio target project properties.",
	"assets/variables.json.VS_FILTER_PROPS": "Sets the filter props file to be included in the visual studio C++ project filter file.",
	"assets/variables.json.VS_GLOBAL_KEYWORD": "Visual Studio project keyword.",
	"assets/variables.json.VS_GLOBAL_PROJECT_TYPES": "Visual Studio project type(s).",
	"assets/variables.json.VS_GLOBAL_ROOTNAMESPACE": "Visual Studio project root namespace.",
	"assets/variables.json.VS_GLOBAL_variable": "Visual Studio project-specific global variable.",
	"assets/variables.json.VS_IOT_EXTENSIONS_VERSION": "Visual Studio Windows 10 IoT Extensions Version",
	"assets/variables.json.VS_IOT_STARTUP_TASK": "Visual Studio Windows 10 IoT Continuous Background Task",
	"assets/variables.json.VS_JUST_MY_CODE_DEBUGGING": "Enable Just My Code with Visual Studio debugger.",
	"assets/variables.json.VS_KEYWORD": "Removed. This once specified the Visual Studio project keyword for the Visual Studio 9 2008 generator, and older, but all of those generators have been removed.",
	"assets/variables.json.VS_MOBILE_EXTENSIONS_VERSION": "Visual Studio Windows 10 Mobile Extensions Version",
	"assets/variables.json.VS_NO_COMPILE_BATCHING": "Turn off compile batching for the target. Usually MSBuild calls the compiler with multiple c/cpp files and compiler starts subprocesses for each file to make the build parallel. If you want compiler to be invoked with one file at a time set VS_NO_COMPILE_BATCHING to ON. If this flag is set MSBuild will call compiler with one c/cpp file at a time. Useful when you want to use tool that replaces the compiler, for example some build caching tool.",
	"assets/variables.json.VS_NO_SOLUTION_DEPLOY": "Specify that the target should not be marked for deployment to a Windows CE or Windows Phone device in the generated Visual Studio solution.",
	"assets/variables.json.VS_PACKAGE_REFERENCES": "Visual Studio package references for nuget.",
	"assets/variables.json.VS_PLATFORM_TOOLSET": "Overrides the platform toolset used to build a target.",
	"assets/variables.json.VS_PROJECT_IMPORT": "Visual Studio managed project imports",
	"assets/variables.json.VS_SCC_AUXPATH": "Visual Studio Source Code Control Aux Path.",
	"assets/variables.json.VS_SCC_LOCALPATH": "Visual Studio Source Code Control Local Path.",
	"assets/variables.json.VS_SCC_PROJECTNAME": "Visual Studio Source Code Control Project.",
	"assets/variables.json.VS_SCC_PROVIDER": "Visual Studio Source Code Control Provider.",
	"assets/variables.json.VS_SDK_REFERENCES": "Visual Studio project SDK references. Specify a semicolon-separated list  of SDK references to be added to a generated Visual Studio project, e.g. Microsoft.AdMediatorWindows81, Version=1.0.",
	"assets/variables.json.VS_SOLUTION_DEPLOY": "Specify that the target should be marked for deployment when not targeting Windows CE, Windows Phone or a Windows Store application.",
	"assets/variables.json.VS_SOURCE_SETTINGS_tool": "Set any item metadata on all non-built files that use <tool>.",
	"assets/variables.json.VS_USER_PROPS": "Sets the user props file to be included in the visual studio C++ project file. The standard path is $(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props, which is in most cases the same as %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.Win32.user.props or %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.x64.user.props.",
	"assets/variables.json.VS_USE_DEBUG_LIBRARIES": "Indicate to Visual Studio Generators what configurations are considered debug configurations. This controls the UseDebugLibraries setting in each configuration of a .vcxproj file.",
	"assets/variables.json.VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": "Visual Studio Windows Target Platform Minimum Version",
	"assets/variables.json.VS_WINRT_COMPONENT": "Mark a target as a Windows Runtime component for the Visual Studio generator. Compile the target with C++/CX language extensions for Windows Runtime. For SHARED and MODULE libraries, this also defines the _WINRT_DLL preprocessor macro.",
	"assets/variables.json.VS_WINRT_EXTENSIONS": "Deprecated. Use VS_WINRT_COMPONENT instead. This property was an experimental partial implementation of that one.",
	"assets/variables.json.VS_WINRT_REFERENCES": "Visual Studio project Windows Runtime Metadata references",
	"assets/variables.json.WATCOM_RUNTIME_LIBRARY": "Select the Watcom runtime library for use by compilers targeting the Watcom ABI.",
	"assets/variables.json.WIN32_EXECUTABLE": "Build an executable with a WinMain entry point on windows.",
	"assets/variables.json.WINDOWS_EXPORT_ALL_SYMBOLS": "This property is implemented only for MS-compatible tools on Windows.",
	"assets/variables.json.XCODE_ATTRIBUTE_an-attribute": "Set Xcode target attributes directly.",
	"assets/variables.json.XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY": "Tell the Xcode generator to perform code signing for all the frameworks and libraries that are embedded using the XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> property.",
	"assets/variables.json.XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY": "Tell the Xcode generator to remove headers from all the frameworks that are embedded using the XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> property.",
	"assets/variables.json.XCODE_EMBED_type": "Tell the Xcode generator to embed the specified list of items into the target bundle. <type> specifies the embed build phase to use. See the Xcode documentation for the base location of each <type>.",
	"assets/variables.json.XCODE_EMBED_type_CODE_SIGN_ON_COPY": "Boolean property used only by the Xcode generator. It specifies whether to perform code signing for the items that are embedded using the XCODE_EMBED_ property.",
	"assets/variables.json.XCODE_EMBED_type_PATH": "This property is used only by the Xcode generator. When defined, it specifies the relative path to use when embedding the items specified by XCODE_EMBED_. The path is relative to the base location of the Embed XXX build phase associated with <type>. See the Xcode documentation for the base location of each <type>.",
	"assets/variables.json.XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY": "Boolean property used only by the Xcode generator. It specifies whether to remove headers from all the frameworks that are embedded using the XCODE_EMBED_ property.",
	"assets/variables.json.XCODE_GENERATE_SCHEME": "If enabled, the Xcode generator will generate schema files. These are useful to invoke analyze, archive, build-for-testing and test actions from the command line.",
	"assets/variables.json.XCODE_LINK_BUILD_PHASE_MODE": "When using the Xcode generator, libraries to be linked will be specified in the Xcode project file using either the \"Link Binary With Libraries\" build phase or directly as linker flags. The former allows Xcode to manage build paths, which may be necessary when creating Xcode archives because it may use different build paths to a regular build.",
	"assets/variables.json.XCODE_PRODUCT_TYPE": "Set the Xcode productType attribute on its reference to a target. CMake computes a default based on target type but can be told explicitly with this property.",
	"assets/variables.json.XCODE_SCHEME_ADDRESS_SANITIZER": "Whether to enable Address Sanitizer in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": "Whether to enable Detect use of stack after return in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_ARGUMENTS": "Specify command line arguments that should be added to the Arguments section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_DEBUG_AS_ROOT": "Whether to debug the target as 'root'.",
	"assets/variables.json.XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": "Whether to enable Allow debugging when using document Versions Browser in the Options section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": "Whether to disable the Main Thread Checker in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": "Whether to enable Dynamic Library Loads in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": "Whether to enable Dynamic Linker API usage in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": "Property value for Metal: API Validation in the Options section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": "Property value for GPU Frame Capture in the Options section of the generated Xcode scheme. Example values are Metal and Disabled.",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": "Property value for Metal: Shader Validation in the Options section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_ENVIRONMENT": "Specify environment variables that should be added to the Arguments section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_EXECUTABLE": "Specify path to executable in the Info section of the generated Xcode scheme. If not set the schema generator will select the current target if it is actually executable.",
	"assets/variables.json.XCODE_SCHEME_GUARD_MALLOC": "Whether to enable Guard Malloc in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_LAUNCH_CONFIGURATION": "Set the build configuration to run the target.",
	"assets/variables.json.XCODE_SCHEME_LAUNCH_MODE": "Property value for Launch in the Info section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": "Whether to enable the Main Thread Checker option Pause on issues in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_MALLOC_GUARD_EDGES": "Whether to enable Malloc Guard Edges in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_MALLOC_SCRIBBLE": "Whether to enable Malloc Scribble in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_MALLOC_STACK": "Whether to enable Malloc Stack in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_THREAD_SANITIZER": "Whether to enable Thread Sanitizer in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_THREAD_SANITIZER_STOP": "Whether to enable Thread Sanitizer - Pause on issues in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": "Whether to enable Undefined Behavior Sanitizer in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": "Whether to enable Undefined Behavior Sanitizer option Pause on issues in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_SCHEME_WORKING_DIRECTORY": "Specify the Working Directory of the Run and Profile actions in the generated Xcode scheme. In case the value contains generator expressions those are evaluated.",
	"assets/variables.json.XCODE_SCHEME_ZOMBIE_OBJECTS": "Whether to enable Zombie Objects in the Diagnostics section of the generated Xcode scheme.",
	"assets/variables.json.XCODE_XCCONFIG": "If set, the Xcode generator will register the specified file as a target-level XCConfig file. For global XCConfig files see the CMAKE_XCODE_XCCONFIG variable.",
	"assets/variables.json.XCTEST": "This target is a XCTest CFBundle on the Mac."
}